[
["index.html", "Notes de Cours sur R FIN403 Syllabus Presentation du cours Remerciement", " Notes de Cours sur R FIN403 Laurent POLITIS Le 20 février 2017 Syllabus Presentation du cours L’objectif du cours est d’utiliser le langage de programmation statistique R et d’outils en ligne simple afin de mettre en valeur vos résultats d’analyses statistiques. Le cours est constitué d’exemples de codes R et d’exercices que vous appliquerez directement sur votre ordinateur et console R sous cette forme : library(dplyr) library(ggplot2) library(ggthemes) n &lt;- 20000 a &lt;- 3 set.seed(101) make_circle &lt;- function(tx, ty) { data &lt;- data.frame(angle = runif(n, 0, 2 * pi)) %&gt;% mutate(x = a * cos(angle) + tx, y = a * sin(angle) + ty) %&gt;% select(x, y) data2 &lt;- data[sample(nrow(data)),] data &lt;- bind_cols(data, data2) names(data) &lt;- c(&quot;x1&quot;, &quot;y1&quot;, &quot;x2&quot;, &quot;y2&quot;) data } data &lt;- rbind(make_circle(cos(0), sin(0)), make_circle(cos(pi/4), sin(pi/4)), make_circle(cos(pi/2), sin(pi/2)), make_circle(cos(3*pi/4), sin(3*pi/4)), make_circle(cos(pi), sin(pi)), make_circle(cos(5*pi/4), sin(5*pi/4)), make_circle(cos(3*pi/2), sin(3*pi/2)), make_circle(cos(7*pi/4), sin(7*pi/4))) ggplot() + geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2), data %&gt;% filter(x1 != x2), alpha = 0.15, size = 0.015) + coord_equal() + theme_tufte() + theme(line = element_blank(), axis.ticks = element_blank(), axis.ticks.length = unit(0, &quot;null&quot;), axis.title = element_blank(), axis.text = element_blank(), # text = element_blank(), legend.position = &quot;none&quot;, legend.margin=unit(0, &quot;null&quot;), panel.background = element_blank(), panel.border=element_blank(), panel.grid = element_blank(), panel.margin=unit(c(0,0,0,0), &quot;null&quot;), plot.background = element_blank(), plot.margin=unit(c(0,0,0,0), &quot;null&quot;))+ labs(caption=&quot;Source : http://www.r-graph-gallery.com/186-marcus-volz-dataart/&quot;) Plan du cours Durant ces 15 heures de cours les points abordés sont : Prise en main de R (rappel) Extraction et manipulation de données Data visiualisation graphiques classiques et améliorations avec ggplot2 Data visiualisation interactives (html widget, plotly …) Recherche reproductible (shiny, rmarkdow, ) Dans un premier temps, nous allons découvrir les bases de R afin de savoir comment importer et explorer différentes données sous R. Nous allons apprendre comment préparer les données afin de créer des graphiques et applications interactives. Ces outils acquis durant le cours vous permettront de mettre en valeur vos études ou reportings, qui vous seront utiles dans un contexte académique ou professionnel. Mode d’évaluation L’évaluation de ce cours consiste en la création d’un programme R qui formerat un projet informatique de recherche sur la météo sensibilité du flux de vélos en libre service type vélib ou autre. Le projet s’articulera en plusieurs partie : Data Mining Visualisation des résultats du data mining Modélisation Visualisation des résultats de la modélisation Application interactive schéma Script R Thèmes abordés Présentation du cours et de R Le vendredi 17 févier 2017 Au début du cours seront présentés le logiciel R. Un rappel sur l’utilisation de la console et de l’environnement de développement intégré (IDE) R studio sera effectué au début de cette première partie. Des fonctions de base sous R permettant d’importer les données depuis un fichiers texte, csv, excel et même directement depuis le web seront présentées. On examinera comment R stocke les données sous forme de variables, comment les manipuler et de créer des graphiques… Visualiser ces données Le 21 février, 14 à 17h45 == 3h45 travaux dirigés Le but du cours est de continuer à utiliser la libraries GGplot2. Il existe des graphiques de base qui permettent d’examiner les différents jeux de données et modèles statistiques. Ces graphiques constituent des arguments et des preuves pour mettre en évidence les résultats que vous avancez et leurs pertinences de manière simple et synthétique. Les graphiques que nous allons créer sont entre autres : Les boites à moustaches Les histogrammes Les courbes de Des graphes en coordonnées polaire Dans le cours du semestre dernier vous avez appris comment modéliser des relations entre différents jeux de données à l’aide de modèle linéaire lm() et ARIMA… Nous allons découvrir les diverses graphiques diagnostiques de ces modélisations statistiques qui permettent entre autres de repérer les meilleures variables explicatives, de rejeter les mauvaises et de vérifier ces résultats de modélisation. Nuage de points, qqplots, séries temporelles … Graphiques Interactifs et applications Le mercredi 22 mars 2017, == 3h travaux dirigés Nous avons passé en revue différentes manières de présenter nos données sous forme d’illustration statistique. Dans cette partie, les outils de visualisation interactive faisant appel à des librairies codées en java et en html 5 seront présentés (html widget, shiny et r markdown). Les outils comme shiny, r markdown et plotly permettent de créer de véritables petites applications de visualisations et d’applications de vos résultats. Par exemple, le syllabus que vous lisez est entièrement fait sous R à l’aide de r markdown. Travaux pratiques == 3h tp Le but de ce TP est de commencer à travailler sur les données de votre mémoire à l’aide d’un programme R et des notions apprises. Références et conseils de lecture Sur la visualisation des données http://www.r-bloggers.com/ un blog contenant des articles divers et variés sur les nouveautés R. http://vissoc.co/ cours de Data Visualisation avec R et en particulier avec ggplot2 https://sites.google.com/a/analytics.usfca.edu/msan-622-experimental-design-and-visualization/ cours de data visualisation avec R ggplot2 et shiny http://flowingdata.com/ site compilant de très belles illustrations faites en grande partie avec R http://www.htmlwidgets.org/ Sur les bases de R https://openclassrooms.com/courses/effectuez-vos-etudes-statistiques-avec-r http://www.statmethods.net/ pour des exemples rapides en R https://www.datacamp.com/ des cours sur R interactifs Autres https://www.kaggle.com/ site de compétitions et de challenges sur des projets de statistique http://deanattali.com/shiny/ Remerciement J’adresse mes remerciements aux personnes qui m’ont aidé dans la réalisation de ce cours. En premier lieu, je remercie M. Jean Louis Bertrand et Miia Parnaudeau, tous les deux professeurs à l’ESCCA. Ils m’ont donné l’occasion d’enseigner et de partager mes connaissances sur R. Je remercie aussi M.Arthur ROUSSEAU et Samia, qui m’ont aidé respectivement pour les questions informatique et administrative. Enfin je remercie les etudiants pour leurs attention et leurs feedbacks, qu’ils appportent aux cours. "],
["intro.html", "Chapter 1 Introduction 1.1 Pourquoi R ? 1.2 Environnement R", " Chapter 1 Introduction 1.1 Pourquoi R ? 1.1.1 La popularité de R et sa facilité Un nombre croissant de personnes utilisent R. Les graphiques montrent le nombre croissant de questions en relation au langage R sur le site stack overflow. Ces graphiques sont obtenus en utilisant un script R (voir code en bas de la page), qui va automatiquement chercher la donnée sur internet, la traiter et visualiser les résultats du nombre de questions à propos de R sur le site. 1.1.2 D’autres raisons Open source &amp; Gratuit Une très grosse communauté de développeurs et d’utilisateurs Facile à utiliser pour des non-programmeurs pour des calculs statistiques Possibilité de créer de belles illustrations, applications web et même le cours que vous lisez actuellement (à l’aide du package Bookdown) Facile à installer sur les systèmes d’exploitations Linux, Windows et Apple Une quantité très importante de package 1.2 Environnement R 1.2.1 Pré requis Installation de R Sur Windows aller à l’url http://cran.r-project.org/bin/windows/base/ et télécharger la dernière version de R en fonction de votre ordinateur 32 bit ou 64 bit (pour le savoir aller sur paramètres&gt;système&gt;information système) Sur Apple http://cran.r-project.org/bin/macosx/ et télécharger la dernière version de R Pour installer Rstudio http://www.rstudio.com/ide/ pour télécharger la dernière version et installer l’environnement de travail R studio en suivant les indications du site 1.2.2 Présentation de Rstusio Rstudio est un IDE, un environnement de travail pour le langage R. Une interface graphique permet plus facilement d’interagir avec le langage à l’aide de multiple fonctionnalité. Pour les connaître, la lecture de l’aide mémoire de Rstdudio est très utile https://www.rstudio.org/links/ide_cheat_sheet. Editeur Une courte présentation du logiciel Rstudio est faite ci-dessous : Lors de l’ouverture de Rstudio, quatre fenêtres s’ouvrent par défaut. La fenêtre en haut à gauche est un éditeur de texte, qui permet d’écrire un script en R (succession de ligne de commande composée de fonction permettant de créer un véritable programme informatique). En bas à gauche la console R est semblable a un terminal de calculatrice ou d’un ordinateur (Dos, UNIX). Nous pouvons l’utiliser pour lancer diverses commandes, fonctions et scripts R. Généralement, lors de l’exécution d’une commande par exemple print(&quot;hello&quot;), ls(), version et même d’un script les résultats sont afficher à cet endroit. Console La fenêtre en bas à droite est composée de plusieurs tableaux : les fichiers ou dossiers présents dans le répertoire courant (dossier où nous sommes) Files un tableau où les graphiques sont générés Plots une liste des paquets déjà installés (charger ou non) Package l’aide (très importante) des fonctions qui peuvent-être affichées à l’aide de ? si on connait la fonction et ?? pour effectuer une recherche. Help une fenêtre de visualisation des sorties du programme R en html Viewer Environnement de R La fenêtre en haut à droite sont composées de deux tableaux : La fenêtre d’environnement (objets, fonction chargée) L’historique 1.2.3 Vous êtes ici ! La première étape lors du commencement d’un projet à l’aide du logiciel R est de se repérer et de pouvoir changer notre dossier courant de travail. ?getwd() getwd() # fonction pour savoir où l&#39;on est setwd(&quot;~/Documents/&quot;) # fonction pour changer de répertoire file.choose() # permet d&#39;ouvrir un fichier Lister les objets et les supprimer sont des étapes nécessaires avant de lancer un script. L’omission ou le surplus d’un fichier dans la console R peut-être une source d’erreur. ls() ## [1] &quot;dat&quot; &quot;mat&quot; &quot;tagPlot&quot; &quot;tendances&quot; ## [5] &quot;totalQuestions&quot; &quot;toto&quot; &quot;url&quot; &quot;z&quot; a = 1 # création d&#39;un objet R de type integer b &lt;- 2 # création d&#39;un second objet ls() # on peut voir apparaître les nouveaux objets que nous avons créé ## [1] &quot;a&quot; &quot;b&quot; &quot;dat&quot; &quot;mat&quot; ## [5] &quot;tagPlot&quot; &quot;tendances&quot; &quot;totalQuestions&quot; &quot;toto&quot; ## [9] &quot;url&quot; &quot;z&quot; rm(list=ls()) ls() ## character(0) 1.2.4 Variables Dans ce paragraphe nous ferons des rappels sur les variables et les fonctions. Dans R la fonction class() permet de reconnaître le type de variable. Pour créer une variable ou un objet &lt;- est à préférer plutôt que le signe = a = &quot;Hello&quot; a&lt;-&quot;Hello&quot; class(a) ## [1] &quot;character&quot; b &lt;- 1 class(b) ## [1] &quot;numeric&quot; #vecteurs c &lt;- c(1,2,3,4) d &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;) e &lt;- c(&quot;a&quot;=1,&quot;b&quot;=2,&quot;c&quot;=3,&quot;d&quot;=4) f &lt;- c(1,&quot;a&quot;,&quot;d&quot;,4) class(c) ## [1] &quot;numeric&quot; class(d) ## [1] &quot;character&quot; class(e) ## [1] &quot;numeric&quot; class(f) ## [1] &quot;character&quot; Attention le vecteur f ne peut pas mélanger les types de variables. R traduit en string les éléments du vecteurs de type numérique. Les matrices permettent de stocker des numériques ou des caractères en 2 dimensions. Mais pas les deux en même temps cette action est impossible. Il faudra utiliser une dataframe pour cela. f.m &lt;- cbind(f) f.m ## f ## [1,] &quot;1&quot; ## [2,] &quot;a&quot; ## [3,] &quot;d&quot; ## [4,] &quot;4&quot; c.m &lt;- cbind(c) c.m ## c ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 m.m &lt;- cbind(f.m,c.m) m.m ## f c ## [1,] &quot;1&quot; &quot;1&quot; ## [2,] &quot;a&quot; &quot;2&quot; ## [3,] &quot;d&quot; &quot;3&quot; ## [4,] &quot;4&quot; &quot;4&quot; n.m &lt;- cbind(c.m,c.m) n.m ## c c ## [1,] 1 1 ## [2,] 2 2 ## [3,] 3 3 ## [4,] 4 4 Ci dessus nous avons avons vu la limitation des matrices. La matisse est soit de type numérique ou caractère. Pour résoudre ce problème, nous allons initialiser un nouveau objet une dataframe, qui très semblable à une matrice. mat &lt;- matrix(data = c.m, ncol=4,nrow = 3) mat ## [,1] [,2] [,3] [,4] ## [1,] 1 4 3 2 ## [2,] 2 1 4 3 ## [3,] 3 2 1 4 df = data.frame(&quot;numeriques&quot;= c, lettres=f,stringsAsFactors = F) df$numeriques ## [1] 1 2 3 4 df$lettres ## [1] &quot;1&quot; &quot;a&quot; &quot;d&quot; &quot;4&quot; df[,2] ## [1] &quot;1&quot; &quot;a&quot; &quot;d&quot; &quot;4&quot; class(mat[,1]) ## [1] &quot;numeric&quot; class(df[,&quot;numeriques&quot;]) ## [1] &quot;numeric&quot; class(df[,&quot;lettres&quot;]) ## [1] &quot;character&quot; as.matrix(df) ## numeriques lettres ## [1,] &quot;1&quot; &quot;1&quot; ## [2,] &quot;2&quot; &quot;a&quot; ## [3,] &quot;3&quot; &quot;d&quot; ## [4,] &quot;4&quot; &quot;4&quot; as.numeric(f) ## Warning: NAs introduced by coercion ## [1] 1 NA NA 4 as.data.frame(df) ## numeriques lettres ## 1 1 1 ## 2 2 a ## 3 3 d ## 4 4 4 Une liste permet de stocker n’importe quel type d’objet même des graphiques. ### library(ggplot2) liste_objet = list(dataframe= df , a= a, vec = d, mat = mat,plot= qplot(rnorm(1:100))) liste_objet ## $dataframe ## numeriques lettres ## 1 1 1 ## 2 2 a ## 3 3 d ## 4 4 4 ## ## $a ## [1] &quot;Hello&quot; ## ## $vec ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ## ## $mat ## [,1] [,2] [,3] [,4] ## [1,] 1 4 3 2 ## [2,] 2 1 4 3 ## [3,] 3 2 1 4 ## ## $plot ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 1.2.4.1 Dates Les dates et les heures sont gérer par R : * les dates avec as.Date() * les dates avec heures à l’aide de as.POSIXct() Sys.time() ## [1] &quot;2017-02-20 23:18:54 CET&quot; class(Sys.time()) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Sys.Date() ## [1] &quot;2017-02-20&quot; class(Sys.Date()) ## [1] &quot;Date&quot; 1.2.5 Relation logique 1==0 ## [1] FALSE 1&gt;=0 ## [1] TRUE 1&lt;=0 ## [1] FALSE &quot;a&quot; == &quot;b&quot; ## [1] FALSE e &lt;- c(&quot;a&quot;=1,&quot;b&quot;=2,&quot;c&quot;=3,&quot;d&quot;=4) 2 %in% e ## [1] TRUE e %in% 2 ## [1] FALSE TRUE FALSE FALSE c(1,3) %in% e ## [1] TRUE TRUE Les commandes matrix(), cbind(), data.frame() sont des fonctions codées. Définition d’une fonction est un objet R composée de commandes R écrites dans un fichier qui effectuent une tâche prédéfinie permet de faire automatiquement la même tâche plusieurs fois garder un programme plus lisible un gain de temps à long terme Exercice Votre première fonction : Ecrire un code qui prend en argument un texte et le renvoie (fonction équivalente à print) en console sous forme de fonction dans un nouveau fichier hello_fun.R hello &lt;-function(texte=NULL){ # argument ou données d&#39;entrées #code manipulant les données return(texte) # return renvoie le résultat de la fonction } # source(&quot;C:/Users/Laurent/Documents/cours_data_visualisation/hello_fun.R&quot;) hello(&quot;hello world !&quot;) ## [1] &quot;hello world !&quot; Un petit ajout le nom de l’utilisateur : hello &lt;-function(texte=NULL){ #on souhaite coller le nom de l&#39;utilisateur à &quot;hello world&quot; #nom &lt;- Sys.getenv(&quot;USERNAME&quot;) nom &lt;- Sys.getenv(&quot;USER&quot;) # si on est sur linux # on colle le nom de l&#39;utilisateur texte &lt;- paste(nom,texte) return(texte) # return renvoie le r?sultat de la fonction } # source(&quot;C:/Users/Laurent/Documents/cours_data_visualisation/hello_fun2.R&quot;) hello(&quot;hello world !&quot;) ## [1] &quot;mrrobot hello world !&quot; 1.2.6 Les Packages R Les paquets sont constitués de fonctions, données et de code compilé dans un format bien précis. Le répertoire, où le paquet est stocké, est appelé librairie. Le logiciel R vient avec un nombre standard de paquet. D’autres sont disponibles pour le téléchargement. Une fois installé, ils doivent être installé dans la session pour être utilisé. La fonction install.packages(&quot;devtools&quot;) permet d’installer et de télécharger le pacquer deltoïdes. install.packages(&quot;devtools&quot;) ### Pour plus facilement installer les packets install.packages(&quot;ggplot2&quot;) ### pour faire de la data visualisation # install.packages(&quot;ggmap&quot;) # # install.packages(&quot;leaflet&quot;) 1.2.7 Exemple de Script # réquétes # https://data.stackexchange.com/stackoverflow/query/338993/r-trends-questions-per-tag-per-month#resultSets # Importer les données url &lt;- &quot;https://data.stackexchange.com/stackoverflow/csv/440417&quot; # dat &lt;- read.csv(url) load(file = &quot;data_questions.Rdata&quot;) dat$Month &lt;- as.Date(dat$Month) # Dessiner les graphes sous formes de fonctions library(dplyr) library(ggplot2) # data mining # sommer les question et les ordonner totalQuestions &lt;- function(x) { z &lt;- x %&gt;% group_by(TagName) %&gt;% summarise(total = sum(Questions)) %&gt;% arrange(desc(total)) new &lt;- as.character(z$TagName) z$TagName &lt;- factor(new, levels = new) z } # fonctions graphiques # tagPlot &lt;- function(x, title = &quot;Tag popularity&quot;) { ggplot(x, aes(x = TagName, y = total)) + geom_bar(stat = &quot;identity&quot;) + ggtitle(title) + xlab(NULL) + ylab(NULL) } # les question depuis 2016-01-01 dat %&gt;% filter(Month &gt;= &quot;2016-01-01&quot;) %&gt;% totalQuestions() %&gt;% tagPlot() # ------------------------------------------------------------------------ # Ordonner les Tags z &lt;- dat %&gt;% filter(Month &gt;= &quot;2016-01-01&quot;) %&gt;% totalQuestions() dat$TagName &lt;- factor(as.character(dat$TagName), levels = as.character(z$TagName)) ################# # DATA VISU # # # # # ################# library(ggplot2) p1 &lt;- ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20) # Tendances depuis le premier janvier 2014 ################# toto=lapply(X =setNames(as.character( unique(dat$TagName)),as.character( unique(dat$TagName))),FUN = function(x) lm(data = dat[dat$TagName==x,] %&gt;% filter(Month &gt;= &quot;2014-01-01&quot;),formula = Questions~Month)$coefficients) mat=do.call(rbind,toto) tendances = mat[order(mat[,2,drop=T]),2,drop=F] colnames(tendances) = &quot;Tendances depuis 2014&quot; p1 + geom_line(size = 1) library(ggthemes) ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20)+ geom_smooth(size = 1, method = &quot;lm&quot;, span = 0.5) p1 &lt;- ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20) # #https://www.r-bloggers.com/the-most-popular-programming-languages-on-stackoverflow/ "],
["data-visualisation.html", "Chapter 2 Data visualisation 2.1 Premier graphe avec ggplot2 2.2 Ggplot2 2.3 Graphiques et statistiques 2.4 Positions et couleurs des graphes 2.5 Système de coordonnées 2.6 Themes et addins", " Chapter 2 Data visualisation Cette partie va vous apprendre à visualiser vos premières données sous R avec ggplot2. Une des façons de mettre en forme vos données est d’utiliser la librairie ggplot2, qui utilise la (http://vita.had.co.nz/papers/layered-grammar.pdf)[grammaire des graphiques]. Elle considère un graphique comme des données composées d’esthétiques de formes géométrique. Un graphique se décompose d’élément simple comme la position d’un objet géométrique sur l’axe des ordonnées, des abscisses, de sa couleur et de sa taille … etc Un graphique, en plus du rendu visuel attractif, en data science sert généralement à répondre à une question. Par exemple Quelle est la forme de mes données ? Quelle est la relation entre mes jeux de données ? linéaires, non-linéaires … 2.1 Premier graphe avec ggplot2 Nous allons utiliser des données dèja disponible dans R. ?cars class(cars) ## [1] &quot;data.frame&quot; Puis, nous allons charger la librairie ggplot2 afin de disposer des fonctions de la librairie et créer notre premier graphique. library(ggplot2) ggplot(cars) + geom_point(aes(x=speed,y=dist)) ggplot(cars) + geom_point(aes(x=speed,y=dist,size = speed)) ggplot(cars) + geom_point(aes(x=speed,y=dist),size=4) ggplot(cars) + geom_point(aes(x=speed,y=dist,alpha=speed)) ggplot(cars) + geom_point(aes(x=speed,y=dist,colour=speed&lt;15)) ggplot(cars,aes(x=speed,y=dist)) + geom_point(aes(colour=speed&lt;15)) + geom_smooth(method = &quot;lm&quot;) ggplot(cars) + geom_point(aes(x=speed,y=dist,shape=speed&lt;15),size=4) # Operator IF ELSE if (!require(&quot;ggpmisc&quot;)){ install.packages(&quot;ggpmisc&quot;) } else { } ## Loading required package: ggpmisc ## NULL # Le package ggmisc permet facilement d&#39;afficher l&#39;équation du modèle linéaire ainsi que des métrique d&#39;erreur ma_formule = y ~ x -1 #ma_formule = y ~ x #ma_formule = y ~ poly(x = x,degree =2) ggplot(cars,aes(x=speed,y=dist)) + geom_point(aes(colour=speed&lt;15)) + geom_smooth(method = &quot;lm&quot;,formula = ma_formule ) + stat_poly_eq(aes(label =paste0(&quot;atop(&quot;,..eq.label..,&quot;,&quot;,paste(..adj.rr.label..,..AIC.label..,..BIC.label..,sep=&quot;~&quot;),&quot;)&quot;)),formula =ma_formule, parse = TRUE) Définition Le coeffiecient de détermination pour des observations \\(y\\) et ses valeurs modélisées \\(f\\) est défini comme : \\[R^2 =1- \\frac{\\sum_i (y_i-f_i)^2}{\\sum_i (y_i-\\bar{y})^2}\\] \\[R^2_{adjusted} = {1-(1-R^2){n-1 \\over n-p-1}} = {R^2-(1-R^2){p \\over n-p-1}}\\] avec \\(p\\) le nombre de valeurs explicatives et \\(n\\) la taille de \\(y\\). Plus \\(R^2\\) est grand plus le modèle, qui prédit \\(f\\), explique la variance de \\(y\\). AIC &amp; BIC Le critère d’information d’Akaike (AIC) et le critère d’information bayésien (BIC) sont tous les deux une mesure de la qualité d’un modèle statistique. Il est possible d’augmenter la vraisemblance du modèle statistique testé en ajoutant plusieurs paramètres. Le critère d’information d’Akaike, tout comme le critère d’information bayésien (BIC), permet de pénaliser les modèles en fonction du nombre de paramètres afin de diminuer l’over fiting. On choisit alors le modèle avec le critère d’information d’Akaike ou bayésien le plus faible. Ils sont définis comme : \\[AIC = 2k - 2\\ln(L)\\] \\[BIC = -2\\ln(L) + \\ln(n)k\\] Avec avec \\(n\\) le nombre d’observations dans l’échantillon étudié et \\(k\\) le nombre de paramètres et \\(L\\) la fonction de vraisemblance. Exercice 1 Nous avons vu plusieurs modèles la dernière fois pour modéliser la vitesse et la distance de freinage. En fonction des différentes métriques d’erreurs présentées au dessus. Séléctionner le modèle satistique le plus pertinant en modifiant ‘ma_formule.’ 2.2 Ggplot2 Définition Une librairie R de visualisation de données développée par Hadley Wickham en 2005 selon les principes développés par Leland Wilkinson dans son ouvrage The Grammar of Graphics \\[ Plot = data +Geometry( Aesthetics )\\] Aesthetics (aes) : les couleurs, les tailles, les formes, les labels mais aussi les données en x et en y Geometry (geom_ …) va regrouper les options concernant les types de graphique (line, point, histogramme, heatmap, boxplot, etc.) ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) 2.2.1 Première étape Data Mining Nous allons utiliser des données de l’objet mpg, qui est préchargé dans le paquet ggplot. 2.2.1.1 Information sur les données Il faut connaître ces données. Exercice 2 Quelle est le type de cet objet ? Que contient cet objet ? Que siginifie displ et hwy ? Quelle est le type des vecteurs hwy, displ et manufacturer ? Combien y-a-t il de ligne et de colonne dans mpg ? 2.2.1.2 Nuage de points Un nuage de points ou un scatterplot est le graphe le plus utilisé en statistique. Exercice 3 Reproduisez le scatterplot ci-dessous entre hwy et displ puis entre hwy et cyl; entre class et drv. 2.2.2 Dessiner de l’Esthétique gaphique Dans un graphe, le but est de mettre en évidence les caractéristiques des données que l’on souhaite développer et qui ne sont généralement pas visible à l’œil nu. Dans ce scatterplot, les points en rouge ont l’air d’être particulier par rapport à l’ensemble de l’échantillon. La fonction aes() aesthetic permet de définir l’axe des x et des y mais aussi la taille, les couleurs, le type et la transparence des formes géométriques du graphe. Exercice 3 Dessiner un nuage de points pour chaque esthétique aes(x,y,shape = class ) définit par la colonne class pour les couleurs color, les formes shape, la taille size, et la transparence alpha. ## Warning: Using size for a discrete variable is not advised. ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). Pourquoi il y a des points qui ont disparu de la classe suv dans le graphique où l’on dessine le nuage avec différentes formes de point aes(x,y,shape=class) ? Quel est le problème dans ce code ? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy,colour=&quot;class&quot;)) Quelle est la différence avec les graphiques précédent et quel est l’impact sur les graphes du code ci-dessous ? ```r ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy),colour=“blue”) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy),size=10) ``` Que faut il ajouter pour corriger le graphique avec ? (indice et regarder le message de warning afficher en console) ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). 2.2.3 Erreur courantes Vous avez depuis le début fait des erreurs ou lancé des commandes qui ne marchent pas. Ne vous inquiétiez pas tous les jours même les plus grands programmeurs, hackers et data scientiste en font aussi. Ci dessous la liste recense des erreurs communes, et décrit la manière de les éviter : ( vérifier que toutes les parenthèses se ferment ) &quot;&quot; vérifier la même chose pour les guillemets Vérifier si votre ligne de commande ne finisse pas par un + ou qu’elle ne commence pas par &gt; ou + Si vous êtes toujours bloqués, n’hésitez pas à demander de l’aide à R. La commande ?function_name demande à R de l’aide pour une fonction spécifique. La commande ??function_namecomprend une recherche plus large de cette fonction si la première commande ? ne marche pas. La lecture du message d’erreur est utile. Si le message n’est pas clair, vous avez toujours la possibilité de le Googler. Vous pourriez tomber sur quelqu’un qui a posté sur starck overflow par exemple la même erreur avec la solution au problème. 2.2.4 Panneaux Une des forces de ggplot2 est de pouvoir facilement faire plusieurs graphes en fonction d’une des colonnes de la dataframe du graphe. Par exemple, pour reprendre le travail ci-dessus nous pouvons avoir envie de faire un scatterplot pour différentes classes de voitures. Il faut utiliser la fonction facet_wrap() avec comme argument une formule. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(facets = ~ class) Par contre, si vous souhaitez séparer votre graphique en fonction de deux variables alors il faut utiliser la fonction facet_grid(). ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(year ~ cyl) Exercice 4 1. A quoi sert le . dans la formule de facet_grid ? (Tester les exemples en dessous) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl) Quelles sont les avantages et les désavantages d’utiliser les fonctions facet par rapport à une esthétique aes(x,y,color=...) ? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(facets = ~ class) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy,color=class)) Quelles sont les différences entre facet_grid() et facet_wrap() ? (Indice utiliser ?) 2.2.5 Géométries ## `geom_smooth()` using method = &#39;loess&#39; Quelles est la différence entre ces deux graphiques ? Il y a plus de 30 types de géométrie dans ggplot2. Pour les connaîtres, l’aide mémoire R sur ggplot2 les extensions de ggplot2 https://www.ggplot2-exts.org sont à lire. Chaque géométrie a ses propres esthétiques. Par exemple, les géométries avec des lignes n’ont pas d’esthétiques shape. Mais elles ont linetype et group en plus. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv)) ## `geom_smooth()` using method = &#39;loess&#39; On peut combiner les géométries pour que le graphe soit plus clair. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))+ geom_point(mapping = aes(x = displ, y = hwy, color = drv)) ## `geom_smooth()` using method = &#39;loess&#39; L’esthétique group permet de dessiner plusieurs ligne en fonction d’une colonne de la data frame. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) ## `geom_smooth()` using method = &#39;loess&#39; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) ## `geom_smooth()` using method = &#39;loess&#39; Pour synthétiser le code, il est possible d’ajouter les esthétiques dans la fonction ggplot(data=my_data,aes()). Chaque géométrie prendra alors les esthétiques dans ggplot(aes(...)). On peut toujours ajouter des esthétiques spécifiques dans chaque géométrie. Exercices Que font les options se=FALSE et show.legend=FALSE ? ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point(show.legend=F) + geom_smooth(se = FALSE,show.legend=FALSE) Ces deux graphes sont ils différents ? ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy)) Refaire ces graphes ci-dessous : ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; 2.3 Graphiques et statistiques Nous allons étudier la géométrie geom_bar() en français des diagrammes en bâtons, rectangles. Cette géométrie est particulière comparée aux précédentes. Il y a en effet une transformation des données avant de les afficher sur un graphe. Nous allons prendre les données diamonds. Pour plus d’informations sur ces données tapez ?diamonds. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) Question Quel est l’axe des y ? Où se trouve les données de cet axe ? Quelle est la différence par rapport aux scatterplots précédents ? Schéma du graphe Certaines géométries comme geom_bar utilisent des algorithmes pour calculer les nouvelles valeurs, que l’on nomme stat : histogrammes (compte vos données par fréquence) boîtes à moustache geom_smooth() modélise vos données en direct sur le graphe Il y a plus de 20 stats dans ggplot2 à utiliser pour les découvrir, ?stat_bin, ?stat_count, ?stat_summary. Dès fois, la situation oblige à dessiner que des valeurs déjà calculées. stat = &quot;identity&quot; demo &lt;- data.frame( a=seq(10,50,by=10),b= paste(&quot;bar&quot;,seq(1,5))) ggplot(data = demo) + geom_bar(mapping = aes(x = b, y = a), stat = &quot;identity&quot;) * Vous avez besoin de calculer une métrique particulière : ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) Les métriques possibles à calculer en fonction de chaque stat On peut créer sa propre boîte à moustache ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median ) ** Exercice 4** Quel l’équivalent géométrique de stat_summary() ? Modifiez le code ci-dessus en utilisant une fonction geom_. Quelle est la différence entre les fonctions stat_ et geom_ ? Listez les paires entre les deux genres de fonctions. Quelle est le “bug” de ce graphique? Corrigez le. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop..)) 2.4 Positions et couleurs des graphes ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,color=clarity)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=clarity)) Question Quel est le problème avec les graphes précédents ? Pour résoudre le problème de clarté des graphes précédents, nous pouvons utiliser l’argument position en-dehors de la fonction aes() Position Stack ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + ggtitle(&#39;Position = &quot;stack&quot;&#39;) Position Fill Cette ajustement permet plus facilement de comparer les proportions entre chaque groupe. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) + ggtitle(&#39;Position = &quot;fill&quot;&#39;) Position dodge ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;dodge&quot;) + ggtitle(&#39;Position = &quot;dodge&quot;&#39;) Position Jitter ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = &quot;jitter&quot;) + ggtitle(&#39;Position = &quot;jitter&quot;&#39;) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + ggtitle(&#39;Position = &quot;No jitter&quot;&#39;) ** Exercice 5** 1. Quel est le problème avec ce graphique ? Comment pouvez vous l’améliorer ? ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() Quels sont les arguments de `geom_jitter()``? Comparer geom_jitter() et geom_count() ? Recréer ces graphiques : 2.5 Système de coordonnées Nous pouvons changer les coordonnées cartésiennes en coordonnées polaires. Nous allons commencer par reprendre le des diagrammes en colonnes. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=cut),colour=&quot;black&quot;) Puis nous allons ajouter la commande coord_polar() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=cut),colour=&quot;black&quot;)+coord_polar() Nous pouvons rester dans les coordonnées cartésiennes et changer l’axe des x et des y facilement avec coord_flip() ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip() #install.packages(&quot;maps&quot;) fr &lt;- map_data(&quot;france&quot;) ggplot(fr, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) ggplot(fr, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) + coord_quickmap() Aide mémoire coordonnées avec ggplot2 Exercie Dessiner le département et une région de votre choix ? 2.6 Themes et addins Pour améliorer vos graphes : Installer l’addin devtools::install_url(&quot;https://cran.r-project.org/src/contrib/rgeos_0.3-22.tar.gz&quot;) https://github.com/calligross/ggthemeassist Utiliser les thèmes prédéfinis Aide mémoire thèmes avec ggplot2 "]
]
