[
["index.html", "Notes de Cours sur R FIN403 Syllabus Presentation du cours Remerciements", " Notes de Cours sur R FIN403 Laurent POLITIS Le 31 mai 2017 Syllabus Presentation du cours L’objectif du cours est d’utiliser le langage de programmation statistique R et d’outils en ligne simple afin de mettre en valeur vos résultats d’analyses statistiques. Le cours est constitué d’exemples de codes R et d’exercices que vous appliquerez directement sur votre ordinateur et console R sous cette forme : library(dplyr) library(ggplot2) library(ggthemes) n &lt;- 20000 a &lt;- 3 set.seed(101) make_circle &lt;- function(tx, ty) { data &lt;- data.frame(angle = runif(n, 0, 2 * pi)) %&gt;% mutate(x = a * cos(angle) + tx, y = a * sin(angle) + ty) %&gt;% select(x, y) data2 &lt;- data[sample(nrow(data)),] data &lt;- bind_cols(data, data2) names(data) &lt;- c(&quot;x1&quot;, &quot;y1&quot;, &quot;x2&quot;, &quot;y2&quot;) data } data &lt;- rbind(make_circle(cos(0), sin(0)), make_circle(cos(pi/4), sin(pi/4)), make_circle(cos(pi/2), sin(pi/2)), make_circle(cos(3*pi/4), sin(3*pi/4)), make_circle(cos(pi), sin(pi)), make_circle(cos(5*pi/4), sin(5*pi/4)), make_circle(cos(3*pi/2), sin(3*pi/2)), make_circle(cos(7*pi/4), sin(7*pi/4))) ggplot() + geom_segment(aes(x = x1, xend = x2, y = y1, yend = y2), data %&gt;% filter(x1 != x2), alpha = 0.15, size = 0.015) + coord_equal() + theme_tufte() + theme(line = element_blank(), axis.ticks = element_blank(), axis.ticks.length = unit(0, &quot;null&quot;), axis.title = element_blank(), axis.text = element_blank(), # text = element_blank(), legend.position = &quot;none&quot;, legend.margin=unit(0, &quot;null&quot;), panel.background = element_blank(), panel.border=element_blank(), panel.grid = element_blank(), panel.margin=unit(c(0,0,0,0), &quot;null&quot;), plot.background = element_blank(), plot.margin=unit(c(0,0,0,0), &quot;null&quot;))+ labs(caption=&quot;Source : http://www.r-graph-gallery.com/186-marcus-volz-dataart/&quot;) Plan du cours Durant ces 15 heures de cours les points abordés sont : Prise en main de R (rappel) Extraction et manipulation de données DATA MINING Data visiualisation graphiques classiques et améliorations avec ggplot2 Data visiualisation interactives (html widget, plotly …) Recherche reproductible (shiny, rmarkdow, ) Dans un premier temps, nous allons découvrir les bases de R afin de savoir comment importer et explorer différentes données sous R. Nous allons apprendre comment préparer les données afin de créer des graphiques et applications interactives. Ces outils acquis durant le cours vous permettront de mettre en valeur vos études ou reportings, qui vous seront utiles dans un contexte académique ou professionnel. Mode d’évaluation L’évaluation de ce cours consiste en la création d’un programme , qui formera un projet informatique et statistique de recherche sur une thématique éconimique et de finance. Le projet s’articulera en plusieurs partie : Data Mining (exploration de vos données en relation avec votre problématique) Visualisation des résultats du data mining (utilisation des techniques apprises) Modélisation (explication de vos données) Visualisation des résultats de la modélisation Application interactive schéma Script R Thèmes abordés Présentation du cours et de R Le vendredi 17 févier 2017 Au début du cours seront présentés le logiciel R. Un rappel sur l’utilisation de la console et de l’environnement de développement intégré (IDE) R studio sera effectué au début de cette première partie. On examinera comment R stocke les données sous forme de variables, comment les manipuler et de créer des graphiques… Visualiser ces données Le 21 février, 14 à 17h45 == 3h45 travaux dirigés Le but du cours est de continuer à utiliser la libraries GGplot2. Il existe des graphiques de base qui permettent d’examiner les différents jeux de données et modèles statistiques. Ces graphiques constituent des arguments et des preuves pour mettre en évidence les résultats que vous avancez et leurs pertinences de manière simple et synthétique. Les graphiques que nous allons créer sont entre autres : Les boites à moustaches Les histogrammes Des graphes en coordonnées polaire Graphiques Interactifs et applications Le mercredi 22 mars 2017, == 3h travaux dirigés Nous avons passé en revue différentes manières de présenter nos données sous forme d’illustration statistique. Dans cette partie, les outils de visualisation interactive faisant appel à des librairies codées en java et en html 5 seront présentés (html widget, shiny et r markdown). Les outils comme shiny, r markdown et plotly permettent de créer de véritables petites applications de visualisations et d’applications de vos résultats. Par exemple, le syllabus que vous lisez est entièrement fait sous R à l’aide de r markdown. Data Mining principes de bases Le mercredi 26 avril 2017, == 3h travaux dirigés et pratiques Le “data mining” est le processus de découvrir des relations et des explications de larges volume de données. Il implique l’utilisation de méthode allant des statistiques, à l’apprantissage automatique, d’intelligence artificielle et de système d’exploitation des données. Des fonctions de base sous R permettant d’importer les données depuis un fichiers texte, csv, excel et même directement depuis le web seront présentées. Travaux pratiques == 3h tp Le but de ce TP est de commencer à travailler sur les données de votre mémoire à l’aide d’un programme R et des notions apprises. Références et conseils de lecture Sur la visualisation des données http://www.r-bloggers.com/ un blog contenant des articles divers et variés sur les nouveautés R. http://vissoc.co/ cours de Data Visualisation avec R et en particulier avec ggplot2 https://sites.google.com/a/analytics.usfca.edu/msan-622-experimental-design-and-visualization/ cours de data visualisation avec R ggplot2 et shiny http://flowingdata.com/ site compilant de très belles illustrations faites en grande partie avec R http://www.htmlwidgets.org/ Sur les bases de R https://openclassrooms.com/courses/effectuez-vos-etudes-statistiques-avec-r http://www.statmethods.net/ pour des exemples rapides en R https://www.datacamp.com/ des cours sur R interactifs Autres https://www.kaggle.com/ site de compétitions et de challenges sur des projets de statistique http://deanattali.com/shiny/ Remerciements J’adresse mes remerciements aux personnes qui m’ont aidé dans la réalisation de ce cours. En premier lieu, je remercie M. Jean Louis Bertrand et Miia Parnaudeau, tous les deux professeurs à l’ESCCA. Ils m’ont donné l’occasion d’enseigner et de partager mes connaissances sur R. Je remercie aussi M.Arthur ROUSSEAU et Samia BEN AMAR, qui m’ont aidé respectivement pour les questions informatiques et administratives. Enfin je remercie les etudiants pour leurs attentions et leurs feedbacks, qu’ils appportent aux cours. "],
["intro.html", "Chapter 1 Introduction 1.1 Pourquoi R ? 1.2 Environnement R", " Chapter 1 Introduction 1.1 Pourquoi R ? 1.1.1 La popularité de R et sa facilité Un nombre croissant de personnes utilisent R. Les graphiques montrent le nombre croissant de questions en relation au langage R sur le site stack overflow. Ces graphiques sont obtenus en utilisant un script R (voir code en bas de la page), qui va automatiquement chercher la donnée sur internet, la traiter et visualiser les résultats du nombre de questions à propos de R sur le site. 1.1.2 D’autres raisons Open source &amp; Gratuit Une très grosse communauté de développeurs et d’utilisateurs Facile à utiliser pour des non-programmeurs pour des calculs statistiques Possibilité de créer de belles illustrations, applications web et même le cours que vous lisez actuellement (à l’aide du package Bookdown) Facile à installer sur les systèmes d’exploitations Linux, Windows et Apple Une quantité très importante de package 1.2 Environnement R 1.2.1 Pré requis Installation de R Sur Windows aller à l’url http://cran.r-project.org/bin/windows/base/ et télécharger la dernière version de R en fonction de votre ordinateur 32 bit ou 64 bit (pour le savoir aller sur paramètres&gt;système&gt;information système) Sur Apple http://cran.r-project.org/bin/macosx/ et télécharger la dernière version de R Pour installer Rstudio http://www.rstudio.com/ide/ pour télécharger la dernière version et installer l’environnement de travail R studio en suivant les indications du site 1.2.2 Présentation de Rstusio Rstudio est un IDE, un environnement de travail pour le langage R. Une interface graphique permet plus facilement d’interagir avec le langage à l’aide de multiple fonctionnalité. Pour les connaître, la lecture de l’aide mémoire de Rstdudio est très utile https://www.rstudio.org/links/ide_cheat_sheet. Editeur Une courte présentation du logiciel Rstudio est faite ci-dessous : Lors de l’ouverture de Rstudio, quatre fenêtres s’ouvrent par défaut. La fenêtre en haut à gauche est un éditeur de texte, qui permet d’écrire un script en R (succession de ligne de commande composée de fonction permettant de créer un véritable programme informatique). En bas à gauche la console R est semblable a un terminal de calculatrice ou d’un ordinateur (Dos, UNIX). Nous pouvons l’utiliser pour lancer diverses commandes, fonctions et scripts R. Généralement, lors de l’exécution d’une commande par exemple print(&quot;hello&quot;), ls(), version et même d’un script les résultats sont afficher à cet endroit. Console La fenêtre en bas à droite est composée de plusieurs tableaux : les fichiers ou dossiers présents dans le répertoire courant (dossier où nous sommes) Files un tableau où les graphiques sont générés Plots une liste des paquets déjà installés (charger ou non) Package l’aide (très importante) des fonctions qui peuvent-être affichées à l’aide de ? si on connait la fonction et ?? pour effectuer une recherche. Help une fenêtre de visualisation des sorties du programme R en html Viewer Environnement de R La fenêtre en haut à droite est composée de deux tableaux : La fenêtre d’environnement (objets, fonction chargée) L’historique 1.2.3 Vous êtes ici ! La première étape lors du commencement d’un projet à l’aide du logiciel R est de se repérer et de pouvoir changer notre dossier courant de travail. ?getwd() getwd() # fonction pour savoir où l&#39;on est setwd(&quot;~/Documents/&quot;) # fonction pour changer de répertoire file.choose() # permet d&#39;ouvrir un fichier Lister les objets et les supprimer sont des étapes nécessaires avant de lancer un script. L’omission ou le surplus d’un fichier dans la console R peut-être une source d’erreur. ls() ## [1] &quot;dat&quot; &quot;mat&quot; &quot;tagPlot&quot; &quot;tendances&quot; ## [5] &quot;totalQuestions&quot; &quot;toto&quot; &quot;url&quot; &quot;z&quot; a = 1 # création d&#39;un objet R de type integer b &lt;- 2 # création d&#39;un second objet ls() # on peut voir apparaître les nouveaux objets que nous avons créé ## [1] &quot;a&quot; &quot;b&quot; &quot;dat&quot; &quot;mat&quot; ## [5] &quot;tagPlot&quot; &quot;tendances&quot; &quot;totalQuestions&quot; &quot;toto&quot; ## [9] &quot;url&quot; &quot;z&quot; rm(list=ls()) ls() ## character(0) 1.2.4 Variables Dans ce paragraphe nous ferons des rappels sur les variables et les fonctions. Dans R la fonction class() permet de reconnaître le type de variable. Pour créer une variable ou un objet &lt;- est à préférer plutôt que le signe = a = &quot;Hello&quot; a&lt;-&quot;Hello&quot; class(a) ## [1] &quot;character&quot; b &lt;- 1 class(b) ## [1] &quot;numeric&quot; #vecteurs c &lt;- c(1,2,3,4) d &lt;- c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;) e &lt;- c(&quot;a&quot;=1,&quot;b&quot;=2,&quot;c&quot;=3,&quot;d&quot;=4) f &lt;- c(1,&quot;a&quot;,&quot;d&quot;,4) class(c) ## [1] &quot;numeric&quot; class(d) ## [1] &quot;character&quot; class(e) ## [1] &quot;numeric&quot; class(f) ## [1] &quot;character&quot; Attention le vecteur f ne peut pas mélanger les types de variables. R traduit en chaîne de caractère les éléments du vecteur de type numérique. Les matrices permettent de stocker des numériques ou des caractères en 2 dimensions. Mais pas les deux en même temps cette action est impossible. Il faudra utiliser une dataframe pour cela. f.m &lt;- cbind(f) f.m ## f ## [1,] &quot;1&quot; ## [2,] &quot;a&quot; ## [3,] &quot;d&quot; ## [4,] &quot;4&quot; c.m &lt;- cbind(c) c.m ## c ## [1,] 1 ## [2,] 2 ## [3,] 3 ## [4,] 4 m.m &lt;- cbind(f.m,c.m) m.m ## f c ## [1,] &quot;1&quot; &quot;1&quot; ## [2,] &quot;a&quot; &quot;2&quot; ## [3,] &quot;d&quot; &quot;3&quot; ## [4,] &quot;4&quot; &quot;4&quot; n.m &lt;- cbind(c.m,c.m) n.m ## c c ## [1,] 1 1 ## [2,] 2 2 ## [3,] 3 3 ## [4,] 4 4 Ci-dessus nous avons avons vu la limitation des matrices. La matrice est soit de type numérique ou caractère. Pour résoudre ce problème, nous allons initialiser un nouveau objet `dataframe()’, qui très semblable à une matrice. mat &lt;- matrix(data = c.m, ncol=4,nrow = 3) mat ## [,1] [,2] [,3] [,4] ## [1,] 1 4 3 2 ## [2,] 2 1 4 3 ## [3,] 3 2 1 4 df = data.frame(&quot;numeriques&quot;= c, lettres=f,stringsAsFactors = F) df$numeriques ## [1] 1 2 3 4 df$lettres ## [1] &quot;1&quot; &quot;a&quot; &quot;d&quot; &quot;4&quot; df[,2] ## [1] &quot;1&quot; &quot;a&quot; &quot;d&quot; &quot;4&quot; class(mat[,1]) ## [1] &quot;numeric&quot; class(df[,&quot;numeriques&quot;]) ## [1] &quot;numeric&quot; class(df[,&quot;lettres&quot;]) ## [1] &quot;character&quot; as.matrix(df) ## numeriques lettres ## [1,] &quot;1&quot; &quot;1&quot; ## [2,] &quot;2&quot; &quot;a&quot; ## [3,] &quot;3&quot; &quot;d&quot; ## [4,] &quot;4&quot; &quot;4&quot; as.numeric(f) ## Warning: NAs introduced by coercion ## [1] 1 NA NA 4 as.data.frame(df) ## numeriques lettres ## 1 1 1 ## 2 2 a ## 3 3 d ## 4 4 4 Une liste permet de stocker n’importe quel type d’objet même des graphiques. ### library(ggplot2) liste_objet = list(dataframe= df , a= a, vec = d, mat = mat,plot= qplot(rnorm(1:100))) liste_objet ## $dataframe ## numeriques lettres ## 1 1 1 ## 2 2 a ## 3 3 d ## 4 4 4 ## ## $a ## [1] &quot;Hello&quot; ## ## $vec ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ## ## $mat ## [,1] [,2] [,3] [,4] ## [1,] 1 4 3 2 ## [2,] 2 1 4 3 ## [3,] 3 2 1 4 ## ## $plot ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 1.2.4.1 Dates Les dates et les heures sont gérer par R : les dates avec as.Date() les dates avec heures à l’aide de as.POSIXct() Sys.time() ## [1] &quot;2017-05-31 13:07:10 CEST&quot; class(Sys.time()) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; Sys.Date() ## [1] &quot;2017-05-31&quot; class(Sys.Date()) ## [1] &quot;Date&quot; 1.2.5 Relation logique 1==0 ## [1] FALSE 1&gt;=0 ## [1] TRUE 1&lt;=0 ## [1] FALSE &quot;a&quot; == &quot;b&quot; ## [1] FALSE e &lt;- c(&quot;a&quot;=1,&quot;b&quot;=2,&quot;c&quot;=3,&quot;d&quot;=4) 2 %in% e ## [1] TRUE e %in% 2 ## [1] FALSE TRUE FALSE FALSE c(1,3) %in% e ## [1] TRUE TRUE Les commandes matrix(), cbind(), data.frame() sont des fonctions codées. Définition d’une fonction est un objet R composée de commandes R écrites dans un fichier qui effectuent une tâche prédéfinie permet de faire automatiquement la même tâche plusieurs fois garder un programme plus lisible un gain de temps à long terme Exercice Votre première fonction : Ecrire un code qui prend en argument un texte et le renvoie (fonction équivalente à print) en console sous forme de fonction dans un nouveau fichier hello_fun.R hello &lt;-function(texte=NULL){ # argument ou données d&#39;entrées #code manipulant les données return(texte) # return renvoie le résultat de la fonction } # source(&quot;C:/Users/Laurent/Documents/cours_data_visualisation/hello_fun.R&quot;) hello(&quot;hello world !&quot;) ## [1] &quot;hello world !&quot; Un petit ajout le nom de l’utilisateur : hello &lt;-function(texte=NULL){ #on souhaite coller le nom de l&#39;utilisateur à &quot;hello world&quot; #nom &lt;- Sys.getenv(&quot;USERNAME&quot;) nom &lt;- Sys.getenv(&quot;USER&quot;) # si on est sur linux # on colle le nom de l&#39;utilisateur texte &lt;- paste(nom,texte) return(texte) # return renvoie le r?sultat de la fonction } # source(&quot;C:/Users/Laurent/Documents/cours_data_visualisation/hello_fun2.R&quot;) hello(&quot;hello world !&quot;) ## [1] &quot;mrrobot hello world !&quot; 1.2.6 Les Packages R Les paquets sont constitués de fonctions, données et de code compilé dans un format bien précis. Le répertoire, où le paquet est stocké, est appelé librairie. Le logiciel R vient avec un nombre standard de paquets. D’autres sont disponibles par le téléchargement. Une fois installé, ils doivent être chargée dans la session pour être utilisé. La fonction install.packages(&quot;devtools&quot;) permet d’installer et de télécharger les paquets plus facilement. install.packages(&quot;devtools&quot;) ### Pour plus facilement installer les packets install.packages(&quot;ggplot2&quot;) ### pour faire de la data visualisation # install.packages(&quot;ggmap&quot;) # # install.packages(&quot;leaflet&quot;) 1.2.7 Exemple d’un Script Dans cette partie un code est écrit afin de créer les graphes du début de l’introduction. La question sous jacente est de connaître la dynamique de l’utilisation de R. Si le nombre des questions sur ce forum d’entraide augmente alors il et possible de conclure que ce logiciel est plus utilisé qu’auparavant. Afin de lancer cette mini étude pour connaître la tendance et l’évolution du nombre de question par langage. La première étape est de télécgarger les données disponible sous # réquétes # https://data.stackexchange.com/stackoverflow/query/338993/r-trends-questions-per-tag-per-month#resultSets # Importer les données url &lt;- &quot;https://data.stackexchange.com/stackoverflow/csv/440417&quot; # dat &lt;- read.csv(url) load(file = &quot;data_questions.Rdata&quot;) dat$Month &lt;- as.Date(dat$Month) # Dessiner les graphes sous formes de fonctions library(dplyr) library(ggplot2) # data mining # sommer les question et les ordonner totalQuestions &lt;- function(x) { z &lt;- x %&gt;% group_by(TagName) %&gt;% summarise(total = sum(Questions)) %&gt;% arrange(desc(total)) new &lt;- as.character(z$TagName) z$TagName &lt;- factor(new, levels = new) z } # fonctions graphiques # tagPlot &lt;- function(x, title = &quot;Tag popularity&quot;) { ggplot(x, aes(x = TagName, y = total)) + geom_bar(stat = &quot;identity&quot;) + ggtitle(title) + xlab(NULL) + ylab(NULL) } # les question depuis 2016-01-01 dat %&gt;% filter(Month &gt;= &quot;2016-01-01&quot;) %&gt;% totalQuestions() %&gt;% tagPlot() # ------------------------------------------------------------------------ # Ordonner les Tags z &lt;- dat %&gt;% filter(Month &gt;= &quot;2016-01-01&quot;) %&gt;% totalQuestions() dat$TagName &lt;- factor(as.character(dat$TagName), levels = as.character(z$TagName)) ################# # DATA VISU # # # # # ################# library(ggplot2) p1 &lt;- ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20) # Tendances depuis le premier janvier 2014 ################# toto=lapply(X =setNames(as.character( unique(dat$TagName)),as.character( unique(dat$TagName))),FUN = function(x) lm(data = dat[dat$TagName==x,] %&gt;% filter(Month &gt;= &quot;2014-01-01&quot;),formula = Questions~Month)$coefficients) mat=do.call(rbind,toto) tendances = mat[order(mat[,2,drop=T]),2,drop=F] colnames(tendances) = &quot;Tendances depuis 2014&quot; p1 + geom_line(size = 1) library(ggthemes) ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20)+ geom_smooth(size = 1, method = &quot;lm&quot;, span = 0.5) p1 &lt;- ggplot(dat, aes(x = Month, y = Questions, group = TagName, colour = TagName)) + theme_bw(20) # #https://www.r-bloggers.com/the-most-popular-programming-languages-on-stackoverflow/ "],
["data-visualisation.html", "Chapter 2 Data visualisation 2.1 Premier graphe avec ggplot2 2.2 Grammaire graphique avec ggplot2 2.3 Erreurs courantes 2.4 Panneaux 2.5 Géométries 2.6 Graphiques et statistiques 2.7 Positions et couleurs des graphes 2.8 Système de coordonnées 2.9 Themes et addins 2.10 Histogrammes et courbes de distribution", " Chapter 2 Data visualisation Cette partie va vous apprendre à visualiser vos premières données sous R avec ggplot2. Une des façons de mettre en forme vos données est d’utiliser la librairie ggplot2, qui utilise la grammaire des graphiques. Elle considère qu’un graphique se décompose d’élément simple comme la position d’un objet géométrique sur l’axe des ordonnées, des abscisses, de sa couleur et de sa taille … etc. La combinaison de ces éléments esthétiques des formes géométriques pour un graphiques est comparable à la construction d’une phrase. Un graphique, en plus du rendu visuel attractif, en data science sert généralement à répondre à une question. Par exemple Quelle est la forme de mes données ? Quelle est la relation entre mes jeux de données ? linéaires, non-linéaires … 2.1 Premier graphe avec ggplot2 Nous allons utiliser des données déjà disponible dans R. ?cars class(cars) ## [1] &quot;data.frame&quot; Puis, nous allons charger la librairie ggplot2 library(ggplot2) afin de disposer des fonctions de ggplot2 afin de créer notre premier graphique. La fonction ggplot(data = data.frame) permet d’alimenter le graphique en données. library(ggplot2) ggplot(cars) + geom_point(aes(x=speed,y=dist)) La fonction aes() permet de contrôler la position des géométries, qui sont définies par la fonction de type geom_forme() et affichées sur le graphe. Dans cette exemple, nous avons choisi de dessiner les colonnes speed et dist sur respectivement l’axe des x et y. Mais, la fonction aes() peut aussi définir la taille, la couleur, la transparence et la forme d’éléments géométriques en fonction des données du graphique. ggplot(cars) + geom_point(aes(x=speed,y=dist,size = speed)) ggplot(cars) + geom_point(aes(x=speed,y=dist),size=4) ggplot(cars) + geom_point(aes(x=speed,y=dist,alpha=speed)) Nous pouvons définir l’esthétique à l’aide d’une relation logique qui crée un vecteur de booléen. ggplot(cars) + geom_point(aes(x=speed,y=dist,colour=speed&lt;15)) Nous pouvons superposer différents éléments géométriques avec +. En plus du nuage de points, nous avons déssiné la courbe du modèle linéaire Gaussien avec la fonction geom_smooth(method=&quot;lm&quot;). L’argument method=lm permet de définir la famille de modélisation à utiliser. Dans l’exemple, ci-dessous la fonction aes() est dans la fonction ggplot(cars,aes(x=speed,y=dist)), les éléments définis dans cette fonction s’appliquent alors à toutes les formes géométriques du graphique. ggplot(cars,aes(x=speed,y=dist)) + geom_point(aes(colour=speed&lt;15)) + geom_smooth(method = &quot;lm&quot;) L’esthétique peut être définis manuelement en la déclarant hors de la fonction aes() comme size=4 dans le graphique ci-dessous. ggplot(cars) + geom_point(aes(x=speed,y=dist,shape=speed&lt;15),size=4) Le but d’utiliser des graphiques est de pouvoir explorer vos données et d’en déduire des relations. Par exemple ci-dessous nous allons utiliser une extension de ggplot2 ggpmisc afin de définir le meilleur modèle linéaire pour les données cars. # Operator IF ELSE if (!require(&quot;ggpmisc&quot;)){ install.packages(&quot;ggpmisc&quot;) } else { } ## Loading required package: ggpmisc ## NULL # Le package ggmisc permet facilement d&#39;afficher l&#39;équation du modèle linéaire ainsi que #des métrique d&#39;erreur # ma_formule = y ~ x -1 # #ma_formule = y ~ x ma_formule = y ~ poly(x = x,degree =2) ggplot(cars,aes(x=speed,y=dist)) + geom_point(aes(colour=speed&lt;15)) + geom_smooth(method = &quot;lm&quot;,formula = ma_formule ) + stat_poly_eq(aes(label =paste0(&quot;atop(&quot;,..eq.label..,&quot;,&quot;,paste(..adj.rr.label..,..AIC.label..,..BIC.label..,sep=&quot;~&quot;),&quot;)&quot;)),formula =ma_formule, parse = TRUE) ma_formule = y ~x ggplot(cars,aes(x=speed,y=dist)) + geom_point(aes(colour=speed&lt;15)) + geom_smooth(method = &quot;lm&quot;,formula = ma_formule ) + stat_poly_eq(aes(label =paste0(&quot;atop(&quot;,..eq.label..,&quot;,&quot;,paste(..adj.rr.label..,..AIC.label..,..BIC.label..,sep=&quot;~&quot;),&quot;)&quot;)),formula =ma_formule, parse = TRUE) Définition Le coeffiecient de détermination pour des observations \\(y\\) et ses valeurs modélisées \\(f\\) est défini comme : \\[R^2 =1- \\frac{\\sum_i (y_i-f_i)^2}{\\sum_i (y_i-\\bar{y})^2}\\] \\[R^2_{adjusted} = {1-(1-R^2){n-1 \\over n-p-1}} = {R^2-(1-R^2){p \\over n-p-1}}\\] avec \\(p\\) le nombre de valeurs explicatives et \\(n\\) la taille de \\(y\\). Plus \\(R^2\\) est grand plus le modèle, qui prédit \\(f\\), explique la variance de \\(y\\). AIC &amp; BIC Le critère d’information d’Akaike (AIC) et le critère d’information bayésien (BIC) sont tous les deux une mesure de la qualité d’un modèle statistique. Il est possible d’augmenter la vraisemblance du modèle statistique testé en ajoutant plusieurs paramètres. Le critère d’information d’Akaike, tout comme le critère d’information bayésien (BIC), permet de pénaliser les modèles en fonction du nombre de paramètres afin de diminuer l’over fiting. On choisit alors le modèle avec le critère d’information d’Akaike ou bayésien le plus faible. Ils sont définis comme : \\[AIC = 2k - 2\\ln(L)\\] \\[BIC = -2\\ln(L) + \\ln(n)k\\] Avec avec \\(n\\) le nombre d’observations dans l’échantillon étudié et \\(k\\) le nombre de paramètres et \\(L\\) la fonction de vraisemblance. Exercice 1 Nous avons vu plusieurs modèles la dernière fois pour modéliser la vitesse et la distance de freinage. En fonction des différentes métriques d’erreurs présentées au dessus. Séléctionner le modèle satistique le plus pertinant en modifiant ‘ma_formule.’ 2.2 Grammaire graphique avec ggplot2 Définition Une librairie R de visualisation de données développée par Hadley Wickham en 2005 selon les principes développés par Leland Wilkinson dans son ouvrage The Grammar of Graphics \\[ Plot = data +Geometry( Aesthetics )\\] Aesthetics (aes) : les couleurs, les tailles, les formes, les labels mais aussi les données en x et en y Geometry (geom_ …) va regrouper les options concernant les types de graphique (line, point, histogramme, heatmap, boxplot, etc.) ggplot(data = &lt;DATA&gt;) + &lt;GEOM_FUNCTION&gt;(mapping = aes(&lt;MAPPINGS&gt;)) 2.2.1 Première étape Data Mining Nous allons utiliser des données de l’objet mpg, qui est préchargé dans le paquet ggplot. 2.2.1.1 Information sur les données Il faut connaître les données que nous allons utiliser pour créer les graphiques. Par exemple, savoir si les données contiennent des valeurs discrètes ou continues est important pour deviner la forme des graphiques. Exercice 2 Quelle est le type de cet objet ? Que contient cet objet ? Que siginifie displ et hwy ? Quelle est le type des vecteurs hwy, displ et manufacturer ? Combien y-a-t il de ligne et de colonne dans mpg ? 2.2.1.2 Nuage de points Un nuage de points ou un scatterplot est le graphe le plus utilisé en statistique. Exercice 3 Reproduisez le scatterplot ci-dessous entre hwy et displ puis entre hwy et cyl; entre class et drv. Expliquez pourquoi ces graphes ont ces formes. 2.2.2 L’esthétique gaphique Dans un graphe, le but est de mettre en évidence les caractéristiques des données que l’on souhaite développer et qui ne sont généralement pas visible à l’œil nu. Dans ce scatterplot, les points en rouge ont l’air d’être particulier par rapport à l’ensemble de l’échantillon. La fonction aes() aesthetic permet de définir l’axe des x et des y mais aussi la taille, les couleurs, le type et la transparence des formes géométriques du graphe. Exercice 4 Dessiner un nuage de points pour chaque esthétique aes(x,y,shape = class ) définit par la colonne class pour les couleurs color, les formes shape, la taille size, et la transparence alpha. Pourquoi il y a des points qui ont disparu de la classe suv dans le graphique où l’on dessine le nuage avec différentes formes de point aes(x,y,shape=class) ? Quel est le problème dans ce code ? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy,colour=&quot;class&quot;)) Quelle est la différence avec les graphiques précédent et quel est l’impact sur les graphes du code ci-dessous ? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy),colour=&quot;blue&quot;) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy),size=10) Que faut il ajouter pour corriger le graphique ? (indice et regardez le message de warning afficher en console) ## Warning: The shape palette can deal with a maximum of 6 discrete values ## because more than 6 becomes difficult to discriminate; you have 7. ## Consider specifying shapes manually if you must have them. ## Warning: Removed 62 rows containing missing values (geom_point). 2.3 Erreurs courantes Vous avez depuis le début fait des erreurs ou lancé des commandes qui ne marchent pas. Ne vous inquiétiez pas tous les jours même les plus grands programmeurs, hackers et data scientiste en font aussi. Ci dessous la liste recense des erreurs communes, et décrit la manière de les éviter : ( vérifier que toutes les parenthèses se ferment ) &quot;&quot; vérifier la même chose pour les guillemets Vérifier si votre ligne de commande ne finisse pas par un + ou qu’elle ne commence pas par &gt; ou + Si vous êtes toujours bloqués, n’hésitez pas à demander de l’aide à R. La commande ?function_name demande à R de l’aide pour une fonction spécifique. La commande ??function_namecomprend une recherche plus large de cette fonction si la première commande ? ne marche pas. La lecture du message d’erreur est utile. Si le message n’est pas clair, vous avez toujours la possibilité de le Googler. Vous pourriez tomber sur quelqu’un qui a posté sur starck overflow par exemple la même erreur avec la solution au problème. 2.4 Panneaux Une des forces de ggplot2 est de pouvoir facilement faire plusieurs graphes en fonction d’une des colonnes de la dataframe du graphe. Par exemple, pour reprendre le travail ci-dessus nous pouvons avoir envie de faire un scatterplot pour différentes classes de voitures. Il faut utiliser la fonction facet_wrap() avec comme argument une formule. ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(facets = ~ class) Par contre, si vous souhaitez séparer votre graphique en fonction de deux variables alors il faut utiliser la fonction facet_grid(). ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(year ~ cyl) Exercice 5 A quoi sert le . dans la formule de facet_grid ? (Testez les exemples en dessous) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(. ~ cyl) Quelles sont les avantages et les désavantages d’utiliser les fonctions facet par rapport à une esthétique aes(x,y,color=...) ? ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_wrap(facets = ~ class) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy,color=class)) Quelles sont les différences entre facet_grid() et facet_wrap() ? (Indice utiliser ?) 2.5 Géométries ## `geom_smooth()` using method = &#39;loess&#39; Quelles est la différence entre ces deux graphiques ? Il y a plus de 30 types de géométrie dans ggplot2. Pour les connaîtres, l’aide mémoire R sur ggplot2 et les extensions de ggplot2 https://www.ggplot2-exts.org sont à lire. Chaque géométrie a ses propres esthétiques. Par exemple, les géométries avec des lignes n’ont pas d’esthétiques shape. Mais elles ont linetype et group en plus. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv)) ## `geom_smooth()` using method = &#39;loess&#39; On peut combiner les géométries pour que le graphe soit plus clair. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))+ geom_point(mapping = aes(x = displ, y = hwy, color = drv)) ## `geom_smooth()` using method = &#39;loess&#39; L’esthétique group permet de dessiner plusieurs lignes en fonction d’une colonne de la data frame. ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy)) ## `geom_smooth()` using method = &#39;loess&#39; ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, group = drv)) ## `geom_smooth()` using method = &#39;loess&#39; Pour synthétiser le code, il est possible d’ajouter les esthétiques dans la fonction ggplot(data=my_data,aes()). Chaque géométrie prendra alors les esthétiques dans ggplot(aes(...)). On peut toujours ajouter des esthétiques spécifiques dans chaque géométrie. Exercice 6 Que font les options se=FALSE et show.legend=FALSE ? ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + geom_point(show.legend=F) + geom_smooth(se = FALSE,show.legend=FALSE) Ces deux graphes sont ils différents ? ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_point() + geom_smooth() ggplot() + geom_point(data = mpg, mapping = aes(x = displ, y = hwy)) + geom_smooth(data = mpg, mapping = aes(x = displ, y = hwy)) Refaire les graphes ci-dessous : ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; ## `geom_smooth()` using method = &#39;loess&#39; 2.6 Graphiques et statistiques Nous allons étudier la géométrie geom_bar() en français des diagrammes en bâtons, rectangles. Cette géométrie est particulière comparée aux précédentes. Il y a en effet une transformation des données avant de les afficher sur un graphe. Nous allons prendre les données diamonds. Pour plus d’informations sur ces données tapez ?diamonds. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) Question Quel est l’axe des y ? Où se trouve les données de cet axe ? Quelle est la différence par rapport aux scatterplots précédents ? Schéma du graphe Certaines géométries comme geom_bar utilisent des algorithmes pour calculer les nouvelles valeurs, que l’on nomme stat : histogrammes (compte vos données par fréquence) boîtes à moustache geom_smooth() modélise vos données en direct sur le graphe Il y a plus de 20 stats dans ggplot2 à utiliser pour les découvrir, ?stat_bin, ?stat_count, ?stat_summary. Dès fois, la situation oblige à dessiner que des valeurs déjà calculées. stat = &quot;identity&quot; demo &lt;- data.frame( a=seq(10,50,by=10),b= paste(&quot;bar&quot;,seq(1,5))) ggplot(data = demo) + geom_bar(mapping = aes(x = b, y = a), stat = &quot;identity&quot;) * Vous avez besoin de calculer une métrique particulière : ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1)) Les métriques possibles à calculer en fonction de chaque stat On peut créer sa propre boîte à moustache ggplot(data = diamonds) + stat_summary( mapping = aes(x = cut, y = depth), fun.ymin = min, fun.ymax = max, fun.y = median ) Exercice 7 Quel est l’équivalent géométrique de stat_summary() ? Modifiez le code ci-dessus en utilisant une fonction geom_. Quelle est la différence entre les fonctions stat_ et geom_ ? Listez les paires entre les deux genres de fonctions. Quelle est le “bug” de ce graphique? Corrigez le. ggplot(data = diamonds) + stat_count(mapping = aes(x = cut, y = ..prop..)) 2.7 Positions et couleurs des graphes ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,color=clarity)) ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=clarity)) Question Quel est le problème avec les graphes précédents ? Pour résoudre le problème de clarté des graphes précédents, nous pouvons utiliser l’argument position en-dehors de la fonction aes() Position Stack La position par défaut du diagramme en bâton. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity)) + ggtitle(&#39;Position = &quot;stack&quot;&#39;) Position Fill Cette ajustement permet plus facilement de comparer les proportions entre chaque groupe. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;fill&quot;) + ggtitle(&#39;Position = &quot;fill&quot;&#39;) Position dodge ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut, fill = clarity), position = &quot;dodge&quot;) + ggtitle(&#39;Position = &quot;dodge&quot;&#39;) Position Jitter ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy), position = &quot;jitter&quot;) + ggtitle(&#39;Position = &quot;jitter&quot;&#39;) ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + ggtitle(&#39;Position = &quot;No jitter&quot;&#39;) Exercice 8 Quel est le problème avec ce graphique ? Comment pouvez vous l’améliorer ? ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + geom_point() Quels sont les arguments de geom_jitter()? Comparer geom_jitter() et geom_count() ? Recréer ces graphiques A quelles valeurs/métriques correspondent les traits horizontaux de la boîte à moustache ? (Indice utiliser stat_summary) ggplot(data = diamonds, mapping = aes(x=cut,y=depth)) + geom_boxplot() ggplot(data = diamonds, mapping = aes(x=cut,y=depth)) + geom_boxplot()+ stat_summary( color=&quot;red&quot;, fun.ymin = min, fun.ymax = max, fun.y = median) 2.8 Système de coordonnées Nous pouvons changer les coordonnées cartésiennes en coordonnées polaires. Nous allons commencer par reprendre le des diagrammes en colonnes. ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=cut),colour=&quot;black&quot;) Puis nous allons ajouter la commande coord_polar() ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut,fill=cut),colour=&quot;black&quot;)+coord_polar() Nous pouvons rester dans les coordonnées cartésiennes et changer l’axe des x et des y facilement avec coord_flip(). ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() ggplot(data = mpg, mapping = aes(x = class, y = hwy)) + geom_boxplot() + coord_flip() #install.packages(&quot;maps&quot;) fr &lt;- map_data(&quot;france&quot;) ggplot(fr, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) ggplot(fr, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) + coord_quickmap() Aide mémoire coordonnées avec ggplot2 Exercice 9 Dessinez le département et une région de votre choix ? Quelle est la différence entre coord_map() et coord_quickmap() ? 2.9 Themes et addins Pour améliorer vos graphes : Installer l’addin devtools::install_url(&quot;https://cran.r-project.org/src/contrib/rgeos_0.3-22.tar.gz&quot;) https://github.com/calligross/ggthemeassist Utiliser les thèmes prédéfinis Exercice 10 Changer le thème du précédent graphes ? ggplot(fr, aes(long, lat, group = group)) + geom_polygon(fill = &quot;white&quot;, colour = &quot;black&quot;) + coord_quickmap() Aide mémoire thèmes avec ggplot2 2.10 Histogrammes et courbes de distribution Les histogrammes et les courbes de distribution sont des outils d’exploration des données très souvent utilisées. L’histogramme permet de rapidement étudier la répartition d’un échantillon. ggplot(data=diamonds)+geom_histogram(aes(x=price)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. La largeur et le nombre des classes (les barres sur le graphe) sont paramétrables avec respectivement les arguement binswidth et bins dans la fonction geom_histogram(). ggplot(diamonds) + geom_histogram(aes(x=price),bins = 10) ggplot(diamonds) + geom_histogram(aes(x=price),binwidth = 1000) Comme pour les graphes précendents nous pouvons utiliser la fonction facet_grid et facet_wrap pour créer plusieurs graphes en fonction des données de la data.frame étudiée. ggplot(data=diamonds)+geom_histogram(aes(x=price))+facet_grid(facets = ~clarity) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(data=diamonds)+geom_histogram(aes(x=price))+ facet_wrap(facets = ~ clarity) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.10.1 Courbe de densité En stat., l’estimation par noyau “kernel density estimation” (KDE) est une méthode non paramétrique pour définir la fonction de densité de probabilité d’une variable aléatoire. Si $x_1 … x_n = f(x) $ est un échantillon d’une variable aléatoire, alors l’estimateur non-paramétrique par la méthode du noyau de la densité est : \\[\\widehat{f}_h(x)=\\frac{1}{Nh}\\sum_{i=1}^N K\\left(\\frac{x-x_i}{h}\\right)\\] où {\\(K\\) est un Noyau (‘’kernel’‘en anglais) et \\(h\\) un paramètre nommé’‘fenêtre’’, qui régit le degré de lissage de l’estimation. Dans ggplot2, \\(K\\) est la densité qui suit une loi gaussienne. La fonction geom_density() utilise cette méthode ainsi que la méthode “stat” ..density... Elle fonctionne de la même manière que la fonction geom_histogram() ggplot(data=diamonds)+geom_density(aes(x=price)) C’est généralementla première étape pour avoir une idée de la loi que suit notre échantillon. ggplot(data=diamonds)+geom_density(aes(x=price))+geom_density(aes(x=rweibull(n=53940,shape=1.3, scale=2000)),color=&quot;red&quot;) Il est possible d’ajouter la fonction geom_rub(), afin de mieux comprendre comme ggplot2 estime la fonction de densité de probabilité. data = data.frame(x=1:40,y=c(rnorm(n=20,mean=5,sd = 3),rnorm(n=20,mean = -5,sd = 3))) ggplot(data=data)+geom_density(aes(y))+ geom_rug(sides = &quot;b&quot;,aes(x=y)) + xlim(c(-20,20)) 2.10.2 Combinaison des deux Il est possible de montrer à la fois la fonction de densité de propbabilité estimée par noyau et l’histogramme de cet échantillon. ggplot(data=diamonds,aes(x=price))+geom_histogram(aes(y=..density..),fill=&quot;grey98&quot;,color=&quot;black&quot;)+geom_density(aes(x=price),fill=&quot;red&quot;,alpha=0.2) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(data=diamonds,aes(x=price))+geom_histogram(aes(y=..density..),fill=&quot;grey98&quot;,color=&quot;black&quot;)+geom_density(aes(x=price),fill=&quot;red&quot;,alpha=0.2)+ facet_wrap(facets = ~clarity,scales = &quot;free&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. "],
["visualisation-ii.html", "Chapter 3 Visualisation II 3.1 Introduction 3.2 Graphe interactif 3.3 Plotly 3.4 Recherche et cotation reproductible", " Chapter 3 Visualisation II Le cours précédent nous avons travaillé à l’aide de la librairie ggplot. Elle permet d’explorer vos données à l’aide de graphiques et de statistiques à l’intérieur même du graphe avec la fonctionnalité stats. Aujourd’hui nous allons toujours explorer vos données mais à l’aide de visualisation interactive. Exemple : library(plotly) # Let&#39;s use the diamonds data set : df &lt;- diamonds[sample(nrow(diamonds), 1000), ] # First we do a ggplot with several graphs p &lt;- ggplot(data = df, aes(x = carat, y = price)) + geom_point(aes(text = paste(&quot;Clarity:&quot;, clarity,fill=price,size=depth))) + geom_smooth(aes(colour = cut),method=&quot;lm&quot;) + facet_wrap(~ cut) # Then we make them interactive with ggplotly p=ggplotly(p) p 3.1 Introduction De plus en plus d’acteurs dans le monde de l’entreprise utilisent l’infographie et la data visualisation pour : Communiquer de façon visuelle et simple des résultats complexes Appuyer un raisonnement Transformer des données bruts, abstraites en information (utile et compréhensible) Cette tendance est très anciennes : Codex Atlanticus Léonard de Vinci Les quelques principes généralistes sur l’infographie à garder en mémoires lors de la création d’un graphiques sont listés ci-dessous : mémoire courte quelques secondes d’attention ou de réflexion un max de ≃11 4 ou 5 classes de couleurs, tailles et de styles sont facilement distinguables http://jfly.iam.u-tokyo.ac.jp/color/ notion de perspective données et vérités (source “How to Lie With Statistics”, 1954, Huff) 3.2 Graphe interactif 3.2.1 Leaflet 3.2.1.1 Intro Leaflet est une bibliothèque open source codée en JavaScript,CSS et HTML5, qui permet de construire des cartes et des applications interactive de géolocalisation de vos données. Une librairie en R vous autorise de l’utiliser au sein de vos scripts d’exploration de vos données https://rstudio.github.io/leaflet. Grâce à cette librairie vous entrez dans le monde des *SIG “Système d’information géographique”. Il a été développé par Vladimir Agafonkin, qui a rejoint MapBox. Définition SIG Un système d’information géographique (SIG) est un système d’information conçu pour recueillir, stocker, traiter, analyser, gérer et présenter tous les types de données spatiales et géographiques. Exemple SIG GoogleMap CityMapper https://www.geoportail.gouv.fr/ 3.2.1.2 Utilisation Il faut installer leaflet. install.packages(&quot;leaflet&quot;) # to install the development version from Github, run # devtools::install_github(&quot;rstudio/leaflet&quot;) Une fois que nous avons installé leaflet. Nous allons créer une data.frame des liens de l’Essca à travers le monde. library(leaflet) library(ggmap) essca=geocode(location = c(&quot;Angers&quot;,&quot;Aix en Provence&quot;,&quot;cholet&quot;,&quot;Nantes&quot;,&quot;Nantes&quot;,&quot;Budapest&quot;,&quot;Paris&quot;,&quot;Toulouse&quot;,&quot;Lyon&quot;,&quot;Bordeaux&quot;,&quot;Shanghai&quot;)) essca$ville= c(&quot;Angers&quot;,&quot;Aix en Provence&quot;,&quot;cholet&quot;,&quot;Nantes&quot;,&quot;Nantes&quot;,&quot;Budapest&quot;,&quot;Paris&quot;,&quot;Toulouse&quot;,&quot;Lyon&quot;,&quot;Bordeaux&quot;,&quot;Shanghai&quot;) head(essca) ## lon lat ville ## 1 -0.563166 47.47842 Angers ## 2 5.447427 43.52974 Aix en Provence ## 3 -0.879787 47.05941 cholet ## 4 -1.553621 47.21837 Nantes ## 5 -1.553621 47.21837 Nantes ## 6 19.040235 47.49791 Budapest m &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(lng = essca$lon ,lat = essca$lat,popup = essca$ville) m Comme pour ggplot nous pouvons ajouter des couches supplémentaires à l’aide d’un pipe %&gt;%, qui est un opérateur du paquet magrittr. https://github.com/tidyverse/magrittr L’équivalent sans pipe du code précédent est : m &lt;- leaflet() m &lt;- addTiles(m) m &lt;- addMarkers(m,lng = essca$lon ,lat = essca$lat,popup = essca$ville) m Ajoutons un “mètre” à cette carte ! m &lt;- leaflet() %&gt;% addTiles() %&gt;% addMarkers(lng = essca$lon ,lat = essca$lat,popup = essca$ville) %&gt;% addScaleBar() m Exercice 1 Quelle est l’école de l’Essca la plus éloignée par rapport à celle d’Angers en Europe ? Quelle est la distance de cette ville par rapport à Angers ? Même question avec l’utilisation de la fonction ggmap::mapdist() à l’aide de la data.frame essca ? Indice (utiliser ?mapdist() ?which.max) 3.2.1.3 Carte choroplèthe library(rgdal) ## rgdal: version: 1.2-5, (SVN revision 648) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 1.11.3, released 2015/09/16 ## Path to GDAL shared files: /usr/share/gdal/1.11 ## Loaded PROJ.4 runtime: Rel. 4.9.2, 08 September 2015, [PJ_VERSION: 492] ## Path to PROJ.4 shared files: (autodetected) ## Linking to sp version: 1.2-4 # Download .shp file on the web: # download.file(&quot;http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip&quot; , destfile=&quot;world_shape_file.zip&quot;) # system(&quot;unzip world_shape_file.zip&quot;) # Read the file with rgdal library(rgdal) world_spdf=readOGR( dsn= getwd() , layer=&quot;TM_WORLD_BORDERS_SIMPL-0.3&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;/home/mrrobot/Documents/FIN406_2017&quot;, layer: &quot;TM_WORLD_BORDERS_SIMPL-0.3&quot; ## with 246 features ## It has 11 fields # Color by quantile m=leaflet(world_spdf)%&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons(stroke = F, fillOpacity = 0.5, smoothFactor = 0.5, popup = format(world_spdf$POP2005,big.mark = &quot;,&quot;),color = ~colorNumeric(&quot;YlOrRd&quot;, domain=sqrt(POP2005),n = 9)(sqrt(POP2005)) ) %&gt;% addLegend(pal = colorNumeric(&quot;YlOrRd&quot;, domain=world_spdf$POP2005,n = 9),values = ~POP2005) m 3.2.2 Higcharter &amp; Dygraph Je vous conseille la lecture du site https://www.htmlwidgets.org/. Dans ce site, en plus du précédent paquet sur la création de carte interactive deux librairies permettent de générer des graphiques de qualités : Dygraph (pour les times series) Higcharter (pour tout type de graphe, mais plus compliqué à manipuler) library(&quot;highcharter&quot;) ## Highcharts (www.highcharts.com) is a Highsoft software product which is ## not free for commercial and Governmental use library(&quot;forecast&quot;) # appels des paquets airforecast &lt;- forecast(auto.arima(AirPassengers), level = 90) # hchart(airforecast) %&gt;% hc_title(text = &quot;Utilsation de graphe interactif&quot;) 3.2.2.1 Carte choroplèthe avec higcharter Une partie data mining est nécessaire pour extraire les données géophysiques de la carte. On télécharge directement les données sous forme json. Un paquet R jsonlite prend la relève pour pouvoir les lire. # getContent &lt;- function(url) { # library(httr) # content(GET(url)) # } # # world &lt;- getContent(&quot;https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json&quot;) # # is text # world &lt;- jsonlite::fromJSON(world, simplifyVector = FALSE) # # # http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_corrientes_maritimas # marine &lt;- getContent(&quot;http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&amp;typename=geonode%3Amundo_corrientes_maritimas&amp;outputFormat=json&amp;version=1.0.0&amp;service=WFS&amp;request=GetFeature&quot;) # # marine &lt;- geojsonio::as.json(marine) # # # # http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_limites_placas # plates &lt;- getContent(&quot;http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&amp;typename=geonode%3Amundo_limites_placas&amp;outputFormat=json&amp;version=1.0.0&amp;service=WFS&amp;request=GetFeature&quot;) # # plates &lt;- geojsonio::as.json(plates) # # # http://cedeusdata.geosteiniger.cl/layers/geonode:mundo_volcanes # volcano &lt;- getContent(&quot;http://cedeusdata.geosteiniger.cl/geoserver/wfs?srsName=EPSG%3A4326&amp;typename=geonode%3Amundo_volcanes&amp;outputFormat=json&amp;version=1.0.0&amp;service=WFS&amp;request=GetFeature&quot;) # # volcano &lt;- geojsonio::as.json(volcano) # #save(list = c(&quot;world&quot;,&quot;marine&quot;,&quot;plates&quot;,&quot;volcano&quot;),file = &quot;plot_highmap.Rdata&quot;) load(&quot;plot_highmap.Rdata&quot;) highchart(type = &quot;map&quot;) %&gt;% hc_chart(backgroundColor = &quot;#FFFFFF&quot;) %&gt;% hc_add_series(mapData = world, showInLegend = FALSE, nullColor = &quot;#424242&quot;, borderWidth = 0) %&gt;% hc_add_series(data = marine, type = &quot;mapline&quot;, geojson = TRUE, color = &quot;#2980b9&quot;, name = &quot;Marine currents&quot;, tooltip = list(pointFormat = &quot;{point.properties.NOMBRE}&quot;)) %&gt;% hc_add_series(data = plates, type = &quot;mapline&quot;, lineWidth = 2, zIndex = -1, geojson = TRUE, color = &quot;#d35400&quot;, name = &quot;Plates&quot;, tooltip = list(pointFormat = &quot;{point.properties.TIPO}&quot;)) %&gt;% hc_add_series(data = volcano, type = &quot;mappoint&quot;, color = hex_to_rgba(&quot;#f1c40f&quot;, 0.4), geojson = TRUE, name = &quot;Volcanos&quot;, tooltip = list(pointFormat = &quot;{point.properties.NOMBRE}&quot;), marker = list(lineWidth = 0, radius = 2)) Exercice 2 Tester l’intervalle de confiance de prévision du modèle arima à 95 % et 99 %, et quel est l’effet sur le graphe ? Changer la couleur des océans, des continents et des courants marins ? Aide (utiliser l’add in du package colourpicker ) Quelles sont les plus grandes différences avec la carte précédente qui utilisait leaflet ? library(dygraphs) dygraph(nhtemp, main = &quot;New Haven Temperatures&quot;, ylab = &quot;Temp (F)&quot;) *Exercie 3 Quelle est la classe de l’objet nhtemp ? A votre tour vous allez créer un objet xts à l’aide du code ci-dessous et faire un graphique time series en Dygraphs. library(xts) xts(rnorm(10,sd = 8,mean=10), Sys.Date()+1:10) Recréer ce graphique à l’aide de ggplot. library(ggplot2) ggplot(data=data.frame(val = rnorm(10,sd = 8,mean=10), date = Sys.Date()+1:10),aes(x=date,y=val))+ geom_line() +geom_point() 3.3 Plotly 3.3.1 Graphes interactif La grande force du paquet plotly est de pouvoir transformer vos graphiques que vous avez crée au cours du précédent TD en ggplot, qui sont statique. library(ggplot2) g_plot = ggplot(data=data.frame(val = rnorm(10,sd = 8,mean=10), date = Sys.Date()+1:10),aes(x=date,y=val))+ geom_line() +geom_point()+ theme_bw() ggplotly(g_plot) 3.3.2 Graphes en 3D data(volcano) library(plotly) # volcano is a numeric matrix that ships with R p &lt;- plot_ly(z = ~volcano) %&gt;% add_surface() p 3.4 Recherche et cotation reproductible La question de la répétabilité et reproductibilité de vos études statistiques est cruciale : http://www.lemonde.fr/sciences/article/2013/07/15/pour-une-recherche-reproductible-publiez-vos-codes-et-donnees_3447825_1650684.html En particulier, dans le monde de la finance les erreurs de calcul liées à des artéfacts numériques mais aussi informatiques peuvent être néfaste à termes. Pour les éviter, je vous conseille de sauvegarder souvent vos résultats intermédiaire et de stocker vos procédures de calculs sous forme de commentaires dans le scripts ou d’utiliser des documents comme rmarkdown et notebook ainsi que de créer des applications shiny d’exploration de vos données (pour automatiser vos calculs mais aussi de repérer les possibles jeux de données défectueuses). 3.4.1 Rmarkdown https://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet- https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf install.packages(&quot;rmarkdown&quot;) 3.4.2 Shiny Le package shiny permet de créer à partir de R des applications web pour interagir avec vos données et programmes R. https://laurent7352.shinyapps.io/population/ Le code de cette application utilise des données collectées à cette adresse. https://www.quandl.com/data/INSEE/29_000067684_A-Demography-Municipal-population-at-the-census-Angers Server.R load(file = &quot;data.Rdata&quot;) library(shiny) # Define server logic required to draw a scatter plot shinyServer(function(input, output) { output$distPlot &lt;- renderPlot({ library(ggplot2) ggplot(data = tmp.m[tmp.m$Communes==input$select,], aes(x = variable, y =value)) + geom_point() +geom_smooth(method = &quot;lm&quot;) + labs(title=input$select) }) }) Ui.R load(file = &quot;data.Rdata&quot;) library(shiny) # Define UI for application that draws a histogram shinyUI(fluidPage( # Application title titlePanel(&quot;Mod. tendances&quot;), # Sidebar with a slider input for city sidebarLayout( sidebarPanel( selectInput(&quot;select&quot;, label = h3(&quot;Choisir une ville&quot;), choices = nom, selected = 1)), # Show a plot of the generated distribution mainPanel( plotOutput(&quot;distPlot&quot;) ) ) )) "],
["data-mining.html", "Chapter 4 Data Mining 4.1 Importer ou exporter des données 4.2 Traiter vos données 4.3 Chaîne de traitement", " Chapter 4 Data Mining http://www.r-graph-gallery.com/56-matrix-abstract-painting/ 4.1 Importer ou exporter des données Ci-dessous il y a une liste de liens web, qui sont un bon point de départ pour rechercher des données de finance et d’économie : https://www.quandl.com/ https://www.economicsnetwork.ac.uk/links/data_free http://www.quantmod.com/ (package R) https://www.economicsnetwork.ac.uk/links/data_free https://aws.amazon.com/fr/public-datasets/ https://www.google.com/publicdata/directory https://trends.google.fr/trends/ https://www.r-bloggers.com/financial-data-accessible-from-r-part-iii/ https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf 4.1.1 Format Texte Il se peut que les données que vous essayez de télécharger et d’ouvrir sur R soient sous cette forme. Les fichiers sous format texte sont généralement des tableaux séparés par des espaces, virgules, des points virgules, des lettres etc… ## source Google trend sur le terme Blockchain data_blockchain = read.table(file=&quot;data/BlockChain.txt&quot;,sep = &quot; &quot;,header=TRUE) head(x = data_blockchain ) ## Mois blockchain ## 1 2004-01 0 ## 2 2004-02 0 ## 3 2004-03 0 ## 4 2004-04 0 ## 5 2004-05 0 ## 6 2004-06 0 Tracer la série temporelle en ggplot que vous venez d’importer 4.1.2 Format Csv Le type de fichier appelé comma-separated values (CSV) stocke des données sous forme de colonnes de nombres et de textes séparées par des virgules. Chaque ligne du fichier est un enregistrement de données. Chaque ligne consiste en un ou plusieurs champs de données, séparés par des virgules, d’où le nom du format. ## source Google trend sur le terme Blockchain data_BigData = read.csv(file=&quot;data/BigData.csv&quot;,header=TRUE) head(data_BigData ) ## Catégorie...Toutes.les.catégories ## Mois Big data: (Dans tous les pays) ## 2004-01 8 ## 2004-02 6 ## 2004-03 7 ## 2004-04 6 ## 2004-05 6 Dans cet exemple, le fichier ne possède pas le bon nom de colonne. Pour manipuler les noms des colonnes adéquates, il est nécessaire d’utiliser une option de la fonction read.csv. Question : Quelle est l’option, qui permet de passer des lignes dans le début de la lecture du fichier ? ## Mois Big.data...Dans.tous.les.pays. ## 1 2004-01 8 ## 2 2004-02 6 ## 3 2004-03 7 ## 4 2004-04 6 ## 5 2004-05 6 ## 6 2004-06 7 Tracer la série temporelle en ggplot que vous venez d’importer 4.1.3 Format excel Le format très utilisé dans le monde professionnel est Excel. Ils sont plus difficile à lire que les autres avec le logiciel R. Il nécessite un paquet de R à installer. ## # A tibble: 6 × 2 ## Date `Close Price` ## &lt;chr&gt; &lt;dbl&gt; ## 1 2010-07-18 00:00:00 0.09 ## 2 2010-07-19 00:00:00 0.08 ## 3 2010-07-20 00:00:00 0.07 ## 4 2010-07-21 00:00:00 0.08 ## 5 2010-07-22 00:00:00 0.05 ## 6 2010-07-23 00:00:00 0.06 Tracer la série temporelle en ggplot que vous venez d’importer 4.1.4 Html et webscraping Le webscraping consiste à traduire de la page généralement codée en html d’un site web en données numérique comme dans l’exemple ci dessous. Ces techniques de web scraping demande une connaissance en code html et même dans certain cas des connaissances en java script, pour simuler des requêtes faites au serveur web. library(rvest) url=&#39;http://statbel.fgov.be/en/statistics/figures/economy/indicators/prix_prod_con/&#39; TAB=read_html(url)%&gt;%html_nodes(&#39;td&#39;)%&gt;%html_text() NAMES=read_html(url)%&gt;%html_nodes(&#39;th&#39;)%&gt;%html_text() M=data.frame(matrix(TAB,ncol=5,nrow=9,byrow=T)) M=cbind(NAMES[7:15],M) names(M)=NAMES[1:6] 4.2 Traiter vos données Dans cette partie nous allons voir comment organiser nos données et les traiter. Nous avons appris comment les visualiser précédemment. Elles ne sont généralement pas dans une forme exploitable pour notre étude. Une des étapes importantes avant toute étude est de les organiser. Pour cela R dispose de paquets qui permettent de faciliter cette tâche. Nous allons découvrir la librairie dplyr. Généralement, nous voulons tout simplement créer une nouvelle variable, filtrer les données en fonction de certaines caractéristiques et connaître des métriques statistiques résumant nos échantillons. Nous allons commencer par découvrir 6 fonctions du paquet dplyr, qui permettent de résoudre les classiques problèmes rencontrés lors de la manipulation de vos données. Filtrer les valeurs de vos échantillons en fonction de divers paramètres filter Sélectionner les colonnes select() Ordonner les lignes de votre data.frame arrange(). Créer de nouvelles variables en fonction de vos données mutate() Simplifier vos données en statistiques qui résument par divers métriques vos jeux de données summarise() Nous allons utiliser les données du Penn World Table qui permettent d’avoir le produit intérieur brut au cours du temps et dans différents pays. https://cran.r-project.org/web/packages/pwt/index.html #install.packages(pwt) library(pwt) ## Package &#39;pwt&#39; provides Penn World Table versions 5.6, 6.x, 7.x. ## For more recent versions see package &#39;pwt8&#39; (or subsequent packages). Exercice 1 Quelles sont les dimensions et le type de l’objet pwt7.1 ? 4.2.1 Pourquoi utiliser dplyr ? Les raisons pour lesquelles dplyr est intéressant à utiliser : Efficace pour la manipulation des données et leurs traitements Facile à comprendre et à lire grâce à la manière de coder La rapidité des commandes dplyr Etape incontournable de toutes études statistiques (certains parlent de 50% à 80% du temps de travail d’un datascientist consacré au datamining) Exemple : library(ggplot2) data(pwt7.1) ggplot(data=pwt7.1) + geom_line(aes(x=year , y=ppp,color=country))+guides(color=F) ## Warning: Removed 2630 rows containing missing values (geom_path). Le graphe d’au dessus n’est pas très visible. Il représente les séries temporelles par pays de l’observation depuis les années 50 de la parité de pouvoir d’achat (variable ppp de la data.frame pwt7.1). Les données du graphe ont besoin d’un traitement au préalable pour que le graphe soit plus pertinent. Les traitements effectués sur les données sont une partie inhérente au data mining. 4.2.2 filter() filter() permet de sélectionner des observations en fonction de leurs valeurs ou caractéristiques. Le premier argument est le nom de votre data.frame. Le deuxième argument est un booléen (pour rappel TRUE ou FALSE), qui est le résultat des relations logiques pour filtrer les valeurs de votre data.frame. Utilisation classique sous R : pwt7.1[pwt7.1$country == &quot;France&quot; &amp; pwt7.1$year &gt;2000 , ] ## country isocode year pop xrat currency ppp tcgdp ## FRA-2001 France FRA 2001 61479.30 1.117510 Euro 0.8947424 1671491 ## FRA-2002 France FRA 2002 61828.99 1.062550 Euro 0.8967158 1720644 ## FRA-2003 France FRA 2003 62171.39 0.886034 Euro 0.8946320 1774923 ## FRA-2004 France FRA 2004 62534.16 0.805365 Euro 0.8863145 1867928 ## FRA-2005 France FRA 2005 62911.52 0.804120 Euro 0.8744382 1964744 ## FRA-2006 France FRA 2006 63292.51 0.797141 Euro 0.8676881 2072306 ## FRA-2007 France FRA 2007 63681.74 0.730638 Euro 0.8586755 2197328 ## FRA-2008 France FRA 2008 64057.79 0.682675 Euro 0.8505519 2272871 ## FRA-2009 France FRA 2009 64420.07 0.719843 Euro 0.8440548 2238280 ## FRA-2010 France FRA 2010 64768.39 0.755045 Euro 0.8472349 2281305 ## cgdp cgdp2 cda2 cc cg ci p ## FRA-2001 27187.86 27191.38 26881.00 69.83545 6.906094 22.11699 80.06572 ## FRA-2002 27829.07 27837.22 27410.60 70.28920 6.917705 21.26055 84.39281 ## FRA-2003 28548.87 28583.43 28326.49 71.59628 6.941152 20.56368 100.97039 ## FRA-2004 29870.52 29912.87 29791.32 70.89277 6.896153 21.80470 110.05128 ## FRA-2005 31230.27 31290.86 31490.01 71.31478 6.875205 22.44646 108.74474 ## FRA-2006 32741.73 32808.43 33153.25 71.00828 6.844822 23.19792 108.85001 ## FRA-2007 34504.84 34559.96 35097.85 70.66513 6.825179 24.06608 117.52407 ## FRA-2008 35481.58 35520.07 36271.90 71.34059 6.874723 23.90132 124.59104 ## FRA-2009 34745.07 34734.71 35367.42 73.57137 7.360990 20.88920 117.25540 ## FRA-2010 35222.51 35250.28 36082.29 73.85041 7.410363 21.09953 112.20985 ## p2 pc pg pi openc y ## FRA-2001 79.71638 81.14159 98.93786 70.79320 55.58391 75.73611 ## FRA-2002 83.98223 85.61586 104.61468 73.79742 53.48350 75.63022 ## FRA-2003 100.39991 101.72032 123.88921 90.64287 50.92718 74.74381 ## FRA-2004 109.34387 111.53888 136.09178 96.98921 51.88287 74.19543 ## FRA-2005 107.98375 110.10664 133.73781 96.74696 53.35249 73.51346 ## FRA-2006 108.05626 110.16195 132.28502 97.89343 55.09251 73.42715 ## FRA-2007 116.72591 118.85091 139.84129 107.25933 55.26104 74.53116 ## FRA-2008 123.75740 125.77477 147.48886 114.40983 56.00247 75.95152 ## FRA-2009 116.66900 117.96453 138.50639 107.21521 48.49163 76.94224 ## FRA-2010 111.44593 112.82410 132.32334 102.92026 53.27246 75.63581 ## y2 rgdpl rgdpl2 rgdpch kc kg ki ## FRA-2001 75.74591 30028.62 30049.55 30036.83 70.03381 7.038954 22.00989 ## FRA-2002 75.65237 30105.91 30157.42 30112.25 70.94396 7.015455 21.14531 ## FRA-2003 74.83429 30213.19 30270.20 30218.62 71.63854 6.999233 21.03111 ## FRA-2004 74.30063 30834.48 30857.78 30834.50 71.03727 6.971097 21.92968 ## FRA-2005 73.65608 31230.27 31230.27 31230.27 71.31478 6.875205 22.44646 ## FRA-2006 73.57673 31830.87 31808.08 31830.87 70.99265 6.775338 22.85073 ## FRA-2007 74.65022 32399.71 32330.65 32403.34 70.90139 6.671340 23.90677 ## FRA-2008 76.03392 32172.48 32116.39 32175.73 71.33719 6.741480 23.75086 ## FRA-2009 76.91930 31012.11 31091.49 31011.97 74.02736 7.131338 20.96849 ## FRA-2010 75.69544 31299.30 31377.41 31299.28 73.90334 7.132403 21.01475 ## openk rgdpeqa rgdpwok rgdpl2wok rgdptt ## FRA-2001 51.28158 33151.56 65187.22 65214.82 30097.20 ## FRA-2002 51.71185 33217.56 65209.92 65307.75 30301.74 ## FRA-2003 51.10485 33315.65 65384.81 65496.41 30386.96 ## FRA-2004 52.43385 33973.86 66813.94 66864.38 30941.21 ## FRA-2005 53.62444 34391.00 67721.34 67721.34 31230.27 ## FRA-2006 54.97286 35042.18 68860.35 68811.05 31694.99 ## FRA-2007 55.79003 35668.67 70157.69 70000.32 32376.28 ## FRA-2008 56.03421 35420.96 70105.34 69976.05 32083.50 ## FRA-2009 51.09646 34146.36 67547.15 67720.36 31103.87 ## FRA-2010 55.00765 34464.31 68386.06 68556.76 31203.40 Avec dplyr library(dplyr) pwt7.1 %&gt;% filter(country == &quot;France&quot; &amp; year &gt;2000) ## country isocode year pop xrat currency ppp tcgdp ## 1 France FRA 2001 61479.30 1.117510 Euro 0.8947424 1671491 ## 2 France FRA 2002 61828.99 1.062550 Euro 0.8967158 1720644 ## 3 France FRA 2003 62171.39 0.886034 Euro 0.8946320 1774923 ## 4 France FRA 2004 62534.16 0.805365 Euro 0.8863145 1867928 ## 5 France FRA 2005 62911.52 0.804120 Euro 0.8744382 1964744 ## 6 France FRA 2006 63292.51 0.797141 Euro 0.8676881 2072306 ## 7 France FRA 2007 63681.74 0.730638 Euro 0.8586755 2197328 ## 8 France FRA 2008 64057.79 0.682675 Euro 0.8505519 2272871 ## 9 France FRA 2009 64420.07 0.719843 Euro 0.8440548 2238280 ## 10 France FRA 2010 64768.39 0.755045 Euro 0.8472349 2281305 ## cgdp cgdp2 cda2 cc cg ci p ## 1 27187.86 27191.38 26881.00 69.83545 6.906094 22.11699 80.06572 ## 2 27829.07 27837.22 27410.60 70.28920 6.917705 21.26055 84.39281 ## 3 28548.87 28583.43 28326.49 71.59628 6.941152 20.56368 100.97039 ## 4 29870.52 29912.87 29791.32 70.89277 6.896153 21.80470 110.05128 ## 5 31230.27 31290.86 31490.01 71.31478 6.875205 22.44646 108.74474 ## 6 32741.73 32808.43 33153.25 71.00828 6.844822 23.19792 108.85001 ## 7 34504.84 34559.96 35097.85 70.66513 6.825179 24.06608 117.52407 ## 8 35481.58 35520.07 36271.90 71.34059 6.874723 23.90132 124.59104 ## 9 34745.07 34734.71 35367.42 73.57137 7.360990 20.88920 117.25540 ## 10 35222.51 35250.28 36082.29 73.85041 7.410363 21.09953 112.20985 ## p2 pc pg pi openc y y2 ## 1 79.71638 81.14159 98.93786 70.79320 55.58391 75.73611 75.74591 ## 2 83.98223 85.61586 104.61468 73.79742 53.48350 75.63022 75.65237 ## 3 100.39991 101.72032 123.88921 90.64287 50.92718 74.74381 74.83429 ## 4 109.34387 111.53888 136.09178 96.98921 51.88287 74.19543 74.30063 ## 5 107.98375 110.10664 133.73781 96.74696 53.35249 73.51346 73.65608 ## 6 108.05626 110.16195 132.28502 97.89343 55.09251 73.42715 73.57673 ## 7 116.72591 118.85091 139.84129 107.25933 55.26104 74.53116 74.65022 ## 8 123.75740 125.77477 147.48886 114.40983 56.00247 75.95152 76.03392 ## 9 116.66900 117.96453 138.50639 107.21521 48.49163 76.94224 76.91930 ## 10 111.44593 112.82410 132.32334 102.92026 53.27246 75.63581 75.69544 ## rgdpl rgdpl2 rgdpch kc kg ki openk rgdpeqa ## 1 30028.62 30049.55 30036.83 70.03381 7.038954 22.00989 51.28158 33151.56 ## 2 30105.91 30157.42 30112.25 70.94396 7.015455 21.14531 51.71185 33217.56 ## 3 30213.19 30270.20 30218.62 71.63854 6.999233 21.03111 51.10485 33315.65 ## 4 30834.48 30857.78 30834.50 71.03727 6.971097 21.92968 52.43385 33973.86 ## 5 31230.27 31230.27 31230.27 71.31478 6.875205 22.44646 53.62444 34391.00 ## 6 31830.87 31808.08 31830.87 70.99265 6.775338 22.85073 54.97286 35042.18 ## 7 32399.71 32330.65 32403.34 70.90139 6.671340 23.90677 55.79003 35668.67 ## 8 32172.48 32116.39 32175.73 71.33719 6.741480 23.75086 56.03421 35420.96 ## 9 31012.11 31091.49 31011.97 74.02736 7.131338 20.96849 51.09646 34146.36 ## 10 31299.30 31377.41 31299.28 73.90334 7.132403 21.01475 55.00765 34464.31 ## rgdpwok rgdpl2wok rgdptt ## 1 65187.22 65214.82 30097.20 ## 2 65209.92 65307.75 30301.74 ## 3 65384.81 65496.41 30386.96 ## 4 66813.94 66864.38 30941.21 ## 5 67721.34 67721.34 31230.27 ## 6 68860.35 68811.05 31694.99 ## 7 70157.69 70000.32 32376.28 ## 8 70105.34 69976.05 32083.50 ## 9 67547.15 67720.36 31103.87 ## 10 68386.06 68556.76 31203.40 # ou plus classique filter(pwt7.1,country == &quot;France&quot; &amp; year &gt;2000) ## country isocode year pop xrat currency ppp tcgdp ## 1 France FRA 2001 61479.30 1.117510 Euro 0.8947424 1671491 ## 2 France FRA 2002 61828.99 1.062550 Euro 0.8967158 1720644 ## 3 France FRA 2003 62171.39 0.886034 Euro 0.8946320 1774923 ## 4 France FRA 2004 62534.16 0.805365 Euro 0.8863145 1867928 ## 5 France FRA 2005 62911.52 0.804120 Euro 0.8744382 1964744 ## 6 France FRA 2006 63292.51 0.797141 Euro 0.8676881 2072306 ## 7 France FRA 2007 63681.74 0.730638 Euro 0.8586755 2197328 ## 8 France FRA 2008 64057.79 0.682675 Euro 0.8505519 2272871 ## 9 France FRA 2009 64420.07 0.719843 Euro 0.8440548 2238280 ## 10 France FRA 2010 64768.39 0.755045 Euro 0.8472349 2281305 ## cgdp cgdp2 cda2 cc cg ci p ## 1 27187.86 27191.38 26881.00 69.83545 6.906094 22.11699 80.06572 ## 2 27829.07 27837.22 27410.60 70.28920 6.917705 21.26055 84.39281 ## 3 28548.87 28583.43 28326.49 71.59628 6.941152 20.56368 100.97039 ## 4 29870.52 29912.87 29791.32 70.89277 6.896153 21.80470 110.05128 ## 5 31230.27 31290.86 31490.01 71.31478 6.875205 22.44646 108.74474 ## 6 32741.73 32808.43 33153.25 71.00828 6.844822 23.19792 108.85001 ## 7 34504.84 34559.96 35097.85 70.66513 6.825179 24.06608 117.52407 ## 8 35481.58 35520.07 36271.90 71.34059 6.874723 23.90132 124.59104 ## 9 34745.07 34734.71 35367.42 73.57137 7.360990 20.88920 117.25540 ## 10 35222.51 35250.28 36082.29 73.85041 7.410363 21.09953 112.20985 ## p2 pc pg pi openc y y2 ## 1 79.71638 81.14159 98.93786 70.79320 55.58391 75.73611 75.74591 ## 2 83.98223 85.61586 104.61468 73.79742 53.48350 75.63022 75.65237 ## 3 100.39991 101.72032 123.88921 90.64287 50.92718 74.74381 74.83429 ## 4 109.34387 111.53888 136.09178 96.98921 51.88287 74.19543 74.30063 ## 5 107.98375 110.10664 133.73781 96.74696 53.35249 73.51346 73.65608 ## 6 108.05626 110.16195 132.28502 97.89343 55.09251 73.42715 73.57673 ## 7 116.72591 118.85091 139.84129 107.25933 55.26104 74.53116 74.65022 ## 8 123.75740 125.77477 147.48886 114.40983 56.00247 75.95152 76.03392 ## 9 116.66900 117.96453 138.50639 107.21521 48.49163 76.94224 76.91930 ## 10 111.44593 112.82410 132.32334 102.92026 53.27246 75.63581 75.69544 ## rgdpl rgdpl2 rgdpch kc kg ki openk rgdpeqa ## 1 30028.62 30049.55 30036.83 70.03381 7.038954 22.00989 51.28158 33151.56 ## 2 30105.91 30157.42 30112.25 70.94396 7.015455 21.14531 51.71185 33217.56 ## 3 30213.19 30270.20 30218.62 71.63854 6.999233 21.03111 51.10485 33315.65 ## 4 30834.48 30857.78 30834.50 71.03727 6.971097 21.92968 52.43385 33973.86 ## 5 31230.27 31230.27 31230.27 71.31478 6.875205 22.44646 53.62444 34391.00 ## 6 31830.87 31808.08 31830.87 70.99265 6.775338 22.85073 54.97286 35042.18 ## 7 32399.71 32330.65 32403.34 70.90139 6.671340 23.90677 55.79003 35668.67 ## 8 32172.48 32116.39 32175.73 71.33719 6.741480 23.75086 56.03421 35420.96 ## 9 31012.11 31091.49 31011.97 74.02736 7.131338 20.96849 51.09646 34146.36 ## 10 31299.30 31377.41 31299.28 73.90334 7.132403 21.01475 55.00765 34464.31 ## rgdpwok rgdpl2wok rgdptt ## 1 65187.22 65214.82 30097.20 ## 2 65209.92 65307.75 30301.74 ## 3 65384.81 65496.41 30386.96 ## 4 66813.94 66864.38 30941.21 ## 5 67721.34 67721.34 31230.27 ## 6 68860.35 68811.05 31694.99 ## 7 70157.69 70000.32 32376.28 ## 8 70105.34 69976.05 32083.50 ## 9 67547.15 67720.36 31103.87 ## 10 68386.06 68556.76 31203.40 4.2.2.1 Rappels sur les opérateurs logiques En plus de connaître les opérateurs de comparaison classiques (&gt;, &gt;=, &lt;, &lt;=, !=, et==), il est nécessaire de connaître un minimum les opérateurs logiques. Les opérations logiques où x est le cercle de gauche et y celui de droite. La zone grise illustre le résultat de l’opération 4.2.2.2 Les données manquantes NA La fonction filter() exclut les données, qui sont FALSE mais aussi les NA. Si vous souhaitez les garder, il faut explicitement le mentionner avec is.na() filter(pwt7.1,country == &quot;Afghanistan&quot; &amp; ppp &gt;0.1) ## country isocode year pop xrat currency ppp ## 1 Afghanistan AFG 1994 18287.71 0.4250999 Afghani 0.1456677 ## 2 Afghanistan AFG 1995 19225.94 0.8333333 Afghani 0.2858570 ## 3 Afghanistan AFG 1996 19864.65 2.5000225 Afghani 0.8612063 ## 4 Afghanistan AFG 1997 20490.22 3.0000300 Afghani 1.0396686 ## 5 Afghanistan AFG 1998 21132.12 3.0000525 Afghani 1.0464535 ## 6 Afghanistan AFG 1999 21821.57 46.6195311 Afghani 15.7580666 ## 7 Afghanistan AFG 2000 22020.95 47.3575747 Afghani 21.5065849 ## 8 Afghanistan AFG 2001 22022.20 47.5000145 Afghani 22.7826618 ## 9 Afghanistan AFG 2002 23050.74 47.2630000 Afghani 15.8984400 ## 10 Afghanistan AFG 2003 24388.58 48.7627536 Afghani 15.6672382 ## 11 Afghanistan AFG 2004 25001.34 47.8453125 Afghani 16.3465377 ## 12 Afghanistan AFG 2005 25538.04 49.4945975 Afghani 17.0887683 ## 13 Afghanistan AFG 2006 26235.21 49.9253308 Afghani 18.1290202 ## 14 Afghanistan AFG 2007 26911.53 49.9620178 Afghani 18.8263812 ## 15 Afghanistan AFG 2008 27658.89 50.2500123 Afghani 18.9155295 ## 16 Afghanistan AFG 2009 28395.72 50.2333333 Afghani 19.0954558 ## 17 Afghanistan AFG 2010 29121.29 46.4783333 Afghani 23.8140581 ## tcgdp cgdp cgdp2 cda2 cc cg ci ## 1 6171.008 337.4402 357.9458 418.0962 84.64966 8.140324 24.01435 ## 2 9434.496 490.7170 520.5918 626.3558 87.53356 8.327031 24.45552 ## 3 9069.799 456.5799 483.7519 599.1693 90.59236 8.586088 24.68035 ## 4 8703.699 424.7733 449.7798 573.1770 94.06810 9.132245 24.23468 ## 5 8348.228 395.0492 417.6807 547.3798 97.69376 9.427623 23.93084 ## 6 8046.974 368.7624 390.1225 524.9973 100.69842 9.683396 24.19061 ## 7 7777.189 353.1722 374.3647 516.9093 103.50321 9.940586 24.63261 ## 8 7548.503 342.7679 362.3935 505.8554 103.91261 10.141187 25.53355 ## 9 12364.484 536.4028 568.0210 734.2712 99.83864 9.165623 20.26405 ## 10 14894.967 610.7353 644.8455 938.7368 108.26260 10.666573 26.64629 ## 11 16682.860 667.2787 717.8116 1020.1029 98.83641 12.773164 30.50334 ## 12 19810.731 775.7341 813.4359 1163.3143 98.73730 15.303782 28.97134 ## 13 22487.316 857.1426 906.5040 1248.9466 95.08500 15.698567 26.99261 ## 14 26857.472 997.9912 1061.2579 1436.5821 92.71561 18.170592 24.47977 ## 15 28662.534 1036.2864 1098.8628 1452.9744 92.79031 17.006386 22.42858 ## 16 32855.670 1157.0643 1199.6876 1540.9918 92.75729 16.049876 19.64226 ## 17 30594.202 1050.5787 1078.9042 1525.8294 104.22775 17.405445 19.79080 ## p p2 pc pg pi openc y ## 1 34.26669 34.64211 40.20783 20.87283 19.60042 60.30097 1.2628969 ## 2 34.30284 34.72005 40.30321 21.16303 19.40235 68.90959 1.7755402 ## 3 34.44794 34.89860 40.45032 21.27547 19.44148 77.51820 1.5802052 ## 4 34.65527 35.07703 40.48660 20.80226 20.05601 86.12682 1.3989120 ## 5 34.88117 35.27092 40.48368 21.05689 20.58356 94.73544 1.2467217 ## 6 33.80143 34.18707 39.26643 20.22781 19.86690 103.34405 1.1063395 ## 7 45.41319 45.89177 52.85034 27.49527 26.39053 111.95267 1.0067514 ## 8 47.96348 48.60775 55.91337 29.28857 28.34117 110.92146 0.9548346 ## 9 33.63824 33.69133 38.40661 19.87328 19.31607 92.15672 1.4577656 ## 10 32.12952 32.65043 37.45938 19.45660 19.55748 132.77983 1.5989665 ## 11 34.16539 35.67589 42.58091 17.96619 19.49633 107.82782 1.6574545 ## 12 34.52653 35.26125 37.81152 15.02983 37.26498 96.46660 1.8260133 ## 13 36.31227 37.39979 38.77541 15.70017 44.15948 86.89906 1.9222423 ## 14 37.68139 39.38283 41.23320 15.07349 47.07524 73.88006 2.1556814 ## 15 37.64284 39.11531 40.98933 15.17595 46.34265 69.96848 2.2182649 ## 16 38.01352 38.27806 42.05442 22.60387 33.94784 58.54041 2.5622950 ## 17 51.23690 52.89882 45.62738 72.53946 68.50815 83.58889 2.2559824 ## y2 rgdpl rgdpl2 rgdpch kc kg ki ## 1 1.339641 431.8470 443.2930 432.4810 82.67646 8.010209 22.38997 ## 2 1.883635 619.0443 635.7064 619.8246 85.17006 8.256817 22.43223 ## 3 1.674246 570.3823 586.0418 570.9475 87.65806 8.480753 22.47694 ## 4 1.481266 527.1998 541.8857 527.5742 90.10163 8.722595 22.51833 ## 5 1.318144 490.5893 504.3033 490.8766 92.47442 9.007833 22.55272 ## 6 1.170423 453.9753 467.1788 454.2413 94.98377 9.132571 22.60945 ## 7 1.067162 427.4116 439.8223 427.6500 97.28643 9.433899 22.64001 ## 8 1.009505 406.1703 417.6921 406.4724 97.12978 9.634225 23.68402 ## 9 1.543693 614.7943 632.7476 615.0989 95.11297 8.773441 19.02304 ## 10 1.688270 703.8569 724.5717 704.6688 99.47435 9.876890 25.02503 ## 11 1.782973 696.6012 706.8714 696.6976 97.93053 12.767608 30.33516 ## 12 1.914760 775.7341 775.7341 775.7341 98.73730 15.303782 28.97134 ## 13 2.032941 799.4455 794.9804 799.4455 99.08946 16.197197 27.71450 ## 14 2.292339 894.2076 874.6509 894.1770 97.48816 18.613051 25.48428 ## 15 2.352215 894.0372 879.0273 893.7143 97.51866 17.527417 23.42421 ## 16 2.656683 1018.1215 1007.2068 1017.4956 94.67330 15.772571 20.00013 ## 17 2.316808 1049.3561 1040.4424 1048.5992 92.79286 14.903953 17.53617 ## openk rgdpeqa rgdpwok rgdpl2wok rgdptt ## 1 48.71891 561.0602 1663.160 1704.738 415.5417 ## 2 55.35760 805.5154 2394.800 2456.162 591.8786 ## 3 61.93692 743.9526 2212.107 2270.589 541.9669 ## 4 68.44278 689.1886 2054.112 2109.834 497.9064 ## 5 74.86147 642.9632 1920.317 1972.842 460.6032 ## 6 81.29400 596.1641 1784.382 1835.204 423.7464 ## 7 87.57229 562.5414 1702.706 1751.171 396.7107 ## 8 86.06410 535.5935 1618.526 1663.201 376.0714 ## 9 74.58082 808.5660 2447.145 2517.359 580.8702 ## 10 101.30618 922.7164 2798.789 2877.839 643.0926 ## 11 92.94931 910.0864 2754.977 2795.208 678.4057 ## 12 90.07864 1010.8384 3052.306 3052.306 775.7341 ## 13 85.20744 1038.7444 3134.798 3117.289 826.6138 ## 14 76.57616 1158.8517 3485.032 3408.929 930.6425 ## 15 76.27597 1155.4512 3452.745 3396.003 932.3537 ## 16 66.93546 1311.0841 3901.608 3862.155 1040.4227 ## 17 57.46605 1346.5908 3979.863 3948.905 934.2637 Exercice 2 Sélectionner 5 pays d’Europe, les Etats-Unis, la Chine et l’Inde. Sélectionner les pays au-dessus du quantile 95% de tcgdp pour l’année 2010 et refaire le graphe. Sélectionner les pays en-dessous du quantile 5% de tcgdp pour l’année 2010 et faire le graphe ci-dessous. 4.2.3 select() Les fonctions de sélection d’un sous ensemble de données de votre échantillon en fonction des colonnes Comme filter() qui sélectionne les lignes en fonction de lignes présentes dans vos données, select() permet de sélectionner les colonnes d’une data.frame. head(pwt7.1[,c(&quot;year&quot;,&quot;pop&quot;)]) ## year pop ## AFG-1950 1950 8150.368 ## AFG-1951 1951 8284.473 ## AFG-1952 1952 8425.333 ## AFG-1953 1953 8573.217 ## AFG-1954 1954 8728.408 ## AFG-1955 1955 8891.209 pwt7.1 %&gt;% select(year,pop,ppp) %&gt;% head() ## year pop ppp ## AFG-1950 1950 8150.368 NA ## AFG-1951 1951 8284.473 NA ## AFG-1952 1952 8425.333 NA ## AFG-1953 1953 8573.217 NA ## AFG-1954 1954 8728.408 NA ## AFG-1955 1955 8891.209 NA Nous ne sommes pas obligés d’utiliser le “pipe” %&gt;%.Même, si je vous le conseille pour plus de clarté dans votre code. head(select(pwt7.1 ,year,pop,ppp)) ## year pop ppp ## AFG-1950 1950 8150.368 NA ## AFG-1951 1951 8284.473 NA ## AFG-1952 1952 8425.333 NA ## AFG-1953 1953 8573.217 NA ## AFG-1954 1954 8728.408 NA ## AFG-1955 1955 8891.209 NA On peut encore simplifier la ligne de code précédente. head(select(pwt7.1 ,year:ppp)) ## year pop xrat currency ppp ## AFG-1950 1950 8150.368 NA &lt;NA&gt; NA ## AFG-1951 1951 8284.473 NA &lt;NA&gt; NA ## AFG-1952 1952 8425.333 NA &lt;NA&gt; NA ## AFG-1953 1953 8573.217 NA &lt;NA&gt; NA ## AFG-1954 1954 8728.408 NA &lt;NA&gt; NA ## AFG-1955 1955 8891.209 0.0168 Afghani NA ou faire l’inverse head(select(pwt7.1 ,-(year:ppp))) ## country isocode tcgdp cgdp cgdp2 cda2 cc cg ci p p2 pc pg pi ## AFG-1950 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1951 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1952 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1953 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1954 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1955 Afghanistan AFG NA NA NA NA NA NA NA NA NA NA NA NA ## openc y y2 rgdpl rgdpl2 rgdpch kc kg ki openk rgdpeqa rgdpwok ## AFG-1950 NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1951 NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1952 NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1953 NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1954 NA NA NA NA NA NA NA NA NA NA NA NA ## AFG-1955 NA NA NA NA NA NA NA NA NA NA NA NA ## rgdpl2wok rgdptt ## AFG-1950 NA NA ## AFG-1951 NA NA ## AFG-1952 NA NA ## AFG-1953 NA NA ## AFG-1954 NA NA ## AFG-1955 NA NA De plus, il y a d’autres, que nous pouvons insérer dans cette fonction : starts_with(“p”): sélectionne les noms des colonnes qui commence par p ends_with (“p”): la même chose mais par la fin contains(“abc”): les noms des colonnes doivent contenir “abc” Exercice 3 Choisir les variables dans pwt7.1 qui contiennent “gdp”. Prendre les variables dans pwt7.1 qui commencent par “p. 4.2.4 arrange() arrange() marche de la même manière que filter() mais la fonction change l’ordre des lignes de la data.frame. Exemple : # R classique head(pwt7.1[order(pwt7.1$pop), c(&quot;pop&quot;, &quot;year&quot;)]) ## pop year ## PLW-1950 7.251 1950 ## PLW-1951 7.448 1951 ## PLW-1952 7.651 1952 ## PLW-1953 7.859 1953 ## PLW-1954 8.073 1954 ## PLW-1955 8.292 1955 print(&quot;Début - Fin&quot;) ## [1] &quot;Début - Fin&quot; tail(pwt7.1[order(pwt7.1$year), c(&quot;pop&quot;, &quot;year&quot;)]) ## pop year ## VUT-2010 221.552 2010 ## VEN-2010 27223.228 2010 ## VNM-2010 89571.130 2010 ## YEM-2010 23495.361 2010 ## ZMB-2010 13460.305 2010 ## ZWE-2010 11651.858 2010 # dplyr pwt7.1 %&gt;% select(pop,year) %&gt;% arrange(year) %&gt;%head() ## pop year ## 1 8150.368 1950 ## 2 1227.156 1950 ## 3 8892.718 1950 ## 4 4117.617 1950 ## 5 45.816 1950 ## 6 17150.336 1950 Exercice 4 Sélectionner les valeurs pour la France de cgdp,ppp et year. Recréer le graphe ci dessous ? Recréer le graphe ci dessous à l’aide du code de l’exercice 2. df =pwt7.1 %&gt;% filter( year == 2010) %&gt;% filter(quantile(tcgdp,0.05,na.rm = T)&gt; tcgdp )%&gt;% arrange(tcgdp) ggplot(data=df) + geom_bar(aes(x=country , y=tcgdp,fill=country),stat=&quot;identity&quot;)+guides(color=F)+ theme(axis.text.x = element_text(angle = 45, hjust = 1)) +scale_x_discrete (limits =df$country ) 4.2.5 mutate() Les fonctions de création de nouvelles variables La fonction mutate() est utilisé pour créer de nouvelle variable dans la data.frame. pwt7.1$pop_percent &lt;- pwt7.1$pop/mean(pwt7.1$pop)*100 # base R approach to create a new variable Speed (in mph) head(pwt7.1$pop_percent) ## [1] 28.37131 28.83813 29.32846 29.84324 30.38346 30.95017 # dplyr approach (prints the new variable but does not store it) pwt7.1 %&gt;% select(pop) %&gt;% mutate(pop_percent =pop/mean(pop,na.rm=T)*100) %&gt;% head() ## pop pop_percent ## 1 8150.368 28.37131 ## 2 8284.473 28.83813 ## 3 8425.333 29.32846 ## 4 8573.217 29.84324 ## 5 8728.408 30.38346 ## 6 8891.209 30.95017 4.2.6 summarise() Les fonctions de calcul de métriques stat Nous allons calculer en fonction de variables groupées au préalable avec group_by() des statistiques (mean,max,min, …). head(aggregate(x = pwt7.1$pop,by= list(pwt7.1$country), sd,na.rm=T)) ## Group.1 x ## 1 Afghanistan 5848.750668 ## 2 Albania 672.475612 ## 3 Algeria 8472.054402 ## 4 Angola 2636.693920 ## 5 Antigua and Barbuda 9.978749 ## 6 Argentina 7355.045582 # dplyr approach: pwt7.1 %&gt;% group_by(country) %&gt;% summarise(sd_pop = sd(pop, na.rm=TRUE)) %&gt;% head() ## # A tibble: 6 × 2 ## country sd_pop ## &lt;fctr&gt; &lt;dbl&gt; ## 1 Afghanistan 5848.750668 ## 2 Albania 672.475612 ## 3 Algeria 8472.054402 ## 4 Angola 2636.693920 ## 5 Antigua and Barbuda 9.978749 ## 6 Argentina 7355.045582 ``` Nous pouvons ordonner ces résultats : pwt7.1 %&gt;% group_by(country) %&gt;% summarise(sd_pop = sd(pop, na.rm=TRUE)) %&gt;% arrange(sd_pop) %&gt;% tail(10) ## # A tibble: 10 × 2 ## country sd_pop ## &lt;fctr&gt; &lt;dbl&gt; ## 1 Mexico 26468.45 ## 2 Bangladesh 34652.56 ## 3 Nigeria 36477.95 ## 4 Pakistan 44715.51 ## 5 United States of America 45615.60 ## 6 Brazil 45715.15 ## 7 Indonesia 49789.04 ## 8 India 246486.85 ## 9 China Version 1 257096.90 ## 10 China Version 2 257096.90 Pour calculer des statistiques sur plusieurs variables, la fonction summarise_each est à utiliser. pwt7.1 %&gt;% group_by(country) %&gt;% summarise_each(funs(mean(.,na.rm=T),sd(., na.rm=TRUE)), pop, ppp,tcgdp) %&gt;% head() ## # A tibble: 6 × 7 ## country pop_mean ppp_mean tcgdp_mean pop_sd ## &lt;fctr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 15234.55869 5.5524263 11388.8892 5848.750668 ## 2 Albania 2469.71454 23.8752038 8158.4529 672.475612 ## 3 Algeria 20137.77244 14.4589328 76089.0551 8472.054402 ## 4 Angola 7389.84857 15.2161872 18421.4477 2636.693920 ## 5 Antigua and Barbuda 65.70082 1.6640378 624.5787 9.978749 ## 6 Argentina 28754.70697 0.4321812 154526.3853 7355.045582 ## # ... with 2 more variables: ppp_sd &lt;dbl&gt;, tcgdp_sd &lt;dbl&gt; 4.2.7 Pour aller plus loin https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf https://pages.rstudio.net/Webinar-Series-Recording-Essential-Tools-for-R.html La fonction lag() : pwt7.1 %&gt;% filter(country==&quot;France&quot;) %&gt;% mutate(change = pop - lag(pop,n=1)) %&gt;% select(change,year,country,pop) %&gt;% head() ## change year country pop ## 1 NA 1950 France 42517.69 ## 2 344.159 1951 France 42861.85 ## 3 321.720 1952 France 43183.57 ## 4 311.461 1953 France 43495.03 ## 5 326.544 1954 France 43821.57 ## 6 396.283 1955 France 44217.86 Exercice 5 Sélectionner 5 mesures de la data.frame pwt7.1 de façon aléatoire. Calculer les métriques d’une boîte à moustache pour chaque pays dans la data.frame pwt7.1.(Max, Min, Median, IQR, quantile) Pour rappel : Schéma de la définition de la boîte à moustache de Rstudio Reproduire ce graphe avec la fonction filter() 4.3 Chaîne de traitement Nous allons dans l’exemple ci dessous voir un exemple de l’utilisation des commandes dplyr dans un cas réel que nous pourrons appeler “chaîne de traitement et de visualisation”. Les données sont chargées depuis la librarie pwt introduites dans les exemples ci-dessus. Charger les données de produit intérieur brut réel et les données des coordonnées des frontières. library(&quot;ggplot2&quot;) library(&quot;maps&quot;) library(dplyr) library(pwt) Nous allons utiliser les données de l’année de 2010 de la data.frame pwt7.1 en utilisant la fonction filter() et les données du paquet “world” en chargeant les données avec la fonction map_data. Recréer ce graphique à l’aide de filter() et de inner_join(). Le graphique montre le tcgdp de l’année 2010. La fonction inner_join() n’a pas été présenté pour l’instant. inner_join() permet de joindre deux data.frame en fonction de l’égalité des élements de deux variables de chaque data.frame. Nous allons fusioner les données des data.frame mapdes par leurs pays en une seule data.frame. Pourquoi manque-t-il des pays ? (Indice regarder le code R ci-dessous) df$country[!unique(df$country) %in% unique(map$region)] ## [1] Antigua and Barbuda China Version 1 ## [3] China Version 2 Congo, Democratic Republic ## [5] Congo, Republic of Cote d&#39;Ivoire ## [7] Gambia, The Hong Kong ## [9] Korea, Republic of Macao ## [11] Micronesia, Fed. Sts. Slovak Republic ## [13] St. Kitts &amp; Nevis St. Lucia ## [15] St. Vincent &amp; Grenadines Trinidad &amp; Tobago ## [17] United Kingdom United States of America ## 190 Levels: Afghanistan Albania Algeria Angola ... Zimbabwe df %&gt;% filter( !unique(country) %in% unique(map$region)) %&gt;% select(country) ## country ## 1 Antigua and Barbuda ## 2 China Version 1 ## 3 China Version 2 ## 4 Congo, Democratic Republic ## 5 Congo, Republic of ## 6 Cote d&#39;Ivoire ## 7 Gambia, The ## 8 Hong Kong ## 9 Korea, Republic of ## 10 Macao ## 11 Micronesia, Fed. Sts. ## 12 Slovak Republic ## 13 St. Kitts &amp; Nevis ## 14 St. Lucia ## 15 St. Vincent &amp; Grenadines ## 16 Trinidad &amp; Tobago ## 17 United Kingdom ## 18 United States of America Comment peut on résoudre ce problème ? #install.packages(&quot;countrycode&quot;) library(&quot;countrycode&quot;) map$iso3c = countrycode(map$region, origin = &quot;country.name&quot;,&quot;iso3c&quot;) ## Warning in countrycode(map$region, origin = &quot;country.name&quot;, &quot;iso3c&quot;): Some values were not matched unambiguously: Ascension Island, Azores, Barbuda, Bonaire, Canary Islands, Chagos Archipelago, Grenadines, Heard Island, Kosovo, Madeira Islands, Micronesia, Saba, Saint Martin, Siachen Glacier, Sint Eustatius, Virgin Islands ## Warning in inner_join_impl(x, y, by$x, by$y, suffix$x, suffix$y): joining ## factor and character vector, coercing into character vector Ce n’est pas tout a fait ça encore. Il y encore des pays qui sont absent l’Allemagne, la république du Cango, et la république démocratique du Cango. Nous devons pour résoudre ce bug changer le nom du pays “à la main” pour faire fonctionner notre programme. Recréer ce graphe ci-dessous à l’aide de la fonction filter. Pour cela, il faut créer une autre variable “continent” à notre data.frame df.map, qui nous permettra de créer des panneaux différents en fonction du pays concerné. df.map$continent = countrycode(df.map$region, origin = &quot;country.name&quot;, destination = &quot;continent&quot;) Nous allons ensuite enlever les valeurs manquantes des lon et lat à l’aide de filter(). library(&quot;dplyr&quot;) df.map.2 = df.map %&gt;% filter(!is.na(long)) %&gt;% filter(!is.na(lat)) De la même manière, il est nécessaire d’enlever les pays qui sont trop excentrés par rapport aux continent d’études. Pour cela nous allons Filter et d’un test pour selectionner les latitudes et longitudes du pays qui ne sont pas supérieures à 99% ou inférieures à 1%. df.map.2 = df.map.2 %&gt;% group_by(continent) %&gt;% filter(lat &gt;= quantile(lat, probs = .01, names = FALSE)) %&gt;% filter(lat &lt; quantile(lat, probs = .99, names = FALSE)) %&gt;% filter(long &gt;= quantile(long, probs = .01, names = FALSE)) %&gt;% filter(long &lt; quantile(long, probs = .99, names = FALSE)) Vous venez de créer votre graphique en ggplot2 “statique”. Vous pouvez le rendre plus intéractif en utilisant la plotly. Charger la librairie “plotly” library(plotly) Puis nous allons utiliser la fonction ggplotly pour transformer le graphe en format html. ggplotly(p_final) "]
]
